<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Arcane Syntax: Posts tagged 'Heresy'</title>
  <description>Arcane Syntax: Posts tagged 'Heresy'</description>
  <link>http://jarcane.github.com/tags/Heresy.html</link>
  <lastBuildDate>Mon, 29 Dec 2014 16:04:20 UT</lastBuildDate>
  <pubDate>Mon, 29 Dec 2014 16:04:20 UT</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>A resume and a code example in one</title>
   <link>http://jarcane.github.com/blog/2014/12/29/a-resume-and-a-code-example-in-one.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-12-29-a-resume-and-a-code-example-in-one-html</guid>
   <pubDate>Mon, 29 Dec 2014 16:04:20 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;Recently I asked on Twitter about whether it was possible to find work in functional programming without a degree, seeing as I&amp;rsquo;m a functional programmer and I don&amp;rsquo;t have a degree, and was pleasantly surprised to be contacted by a recruiter who provided some very useful advice on which languages to look into.&lt;/p&gt;

&lt;p&gt;They also asked for a resume, which suddenly brought me to the realization that I hadn&amp;rsquo;t actually yet written a programming-oriented resume yet.&lt;/p&gt;

&lt;p&gt;So I started thinking of how I could write a resume that would actually highlight my skills thus far as a programmer in an immediately obvious way, and I think I found an interesting solution.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;It&amp;rsquo;s pretty common for UI or graphics designers to hand design their own resumes; it&amp;rsquo;s a very clear and direct way of showing off your own design skills in an obvious way. Sadly, other than that there&amp;rsquo;s little in the way of options for the rest of us: there&amp;rsquo;s loads of templates out there for making an interesting &lt;em&gt;looking&lt;/em&gt; resume, but that&amp;rsquo;s not really the same effect for programmers as it is for a designer.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s needed is a way to show off what one is capable of as a programmer through the medium of the resume itself.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure I&amp;rsquo;ve quite got that far yet, but I have done what I think is a close-by solution: showing off one&amp;rsquo;s basic capabilities as a programmer through the medium of how the resume is &lt;em&gt;generated&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Thus, &lt;a href="https://github.com/jarcane/resume.hsy"&gt;resume.hsy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;resume.hsy&lt;/code&gt; is a straightforward Heresy program with one goal: to generate my resume in Markdown format. After just a half-day&amp;rsquo;s effort, it succeeds at it.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not particularly impressive code (and the contortions involved in generating the output strings are a little ugly), and the output result is by design, not especially beautiful. The point here isn&amp;rsquo;t to make a beautiful design object, but to present my skills in a clear format through the lens of a clear example of how I code. The fact that I designed the language it&amp;rsquo;s written in is also part of the point of the demonstration, inspired by &lt;a href="https://twitter.com/boothead/status/545886788196507648"&gt;the reaction of one commenter&lt;/a&gt; to my original post on Twitter.&lt;/p&gt;

&lt;p&gt;Admittedly, that last bit is probably also a weakness: nobody codes in Heresy yet except me. But the Markdown output is readily available, and the code is mostly readable to anyone familiar with Lisp, and I&amp;rsquo;m also very proud of having written the first example of useful code in Heresy.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Inventing a Thing</title>
   <link>http://jarcane.github.com/blog/2014/12/01/inventing-a-thing.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-12-01-inventing-a-thing-html</guid>
   <pubDate>Mon, 01 Dec 2014 18:39:05 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;One of the more ambitious features I decided to attempt for Heresy was to create a new kind of struct-like syntax that would be easier and faster to use in-place in a functional style. Racket has a very robust struct system which I was initially quite enamored of, but which I soon discovered could get quickly cumbersome to deal with. For Heresy, I wanted something simpler.&lt;/p&gt;

&lt;p&gt;So, some days ago I wrote myself &lt;a href="https://github.com/jarcane/heresy/issues/5"&gt;a spec&lt;/a&gt; for something called &amp;ldquo;Things,&amp;rdquo; but set it aside because I was largely convinced it would take a considerable amount of wizardry to pull it off. The spec contained a considerable amount of functionality, from pattern-matching syntax to inheritance and on.&lt;/p&gt;

&lt;p&gt;I was wrong. It took me half a day. And &lt;a href="https://github.com/jarcane/heresy/commit/7dd1456cbeae767be786cbeb94d40c5ea645f325"&gt;only 29 lines of code.&lt;/a&gt;&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Part of the secret of course to this was actually in the reading and studying I did trying to learn more about combinators and other such lambda-based wizardry. It took me about a week of gestating, but what I realized is that what I needed wasn&amp;rsquo;t a static data structure with some macrology attached to various names, but actually, all that syntax needed to live in the data structure itself. Then inheritance and renaming and copying and all that fun stuff comes for free.&lt;/p&gt;

&lt;p&gt;The result is Things. We can define a new kind of Thing:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;describe&lt;/span&gt; &lt;span class="nv"&gt;Cthulhu&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="ss"&gt;'Immense&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="ss"&gt;'Winged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;status&lt;/span&gt; &lt;span class="ss"&gt;'sleeping&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We can call values from Cthulhu:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Cthulhu&lt;/span&gt; &lt;span class="ss"&gt;'size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ss"&gt;'Immense&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We can copy Cthulhu with new values:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;Cthulhu&lt;/span&gt; &lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))" style="color: inherit"&gt;*&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))" style="color: inherit"&gt;*&lt;/a&gt;&lt;/span&gt; &lt;span class="ss"&gt;'awake&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'status&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ss"&gt;'awake&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We can give a new name to Cthulhu:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;Dreamer&lt;/span&gt; &lt;span class="nv"&gt;Cthulhu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Dreamer&lt;/span&gt; &lt;span class="ss"&gt;'type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ss"&gt;'Winged&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;And we can make children of Cthulhu:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;Star-Spawn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Cthulhu&lt;/span&gt; &lt;span class="ss"&gt;'Medium&lt;/span&gt; &lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))" style="color: inherit"&gt;*&lt;/a&gt;&lt;/span&gt; &lt;span class="ss"&gt;'awake&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Star-Spawn&lt;/span&gt; &lt;span class="ss"&gt;'size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ss"&gt;'Medium&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So how does it work? It&amp;rsquo;s all just a lambda. (describe &amp;hellip;) is a simple macro wrapper that defines a name and seeds it with a call to (thing &amp;hellip;), which is a helper function that returns a lambda containing a closure that holds the actual alist that holds our values as well as the argument handling code for calling and copying it. Indeed, copying Things is just a recursive call to Thing with new values, and (thing &amp;hellip;) can potentially be called anonymously just like lambdas can. And because functions are first-class values, inheritence and value-passing just come with the territory.&lt;/p&gt;

&lt;p&gt;There is one weakness though:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;Cthulhu&lt;/span&gt;
&lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="nv"&gt;&amp;lt;procedure:Cthulhu&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Because Things are just lambdas underneath, they read naked as procedures, so they are not immediately transparent.&lt;/p&gt;

&lt;p&gt;Instead, we have to do this:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;Cthulhu&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="ss"&gt;'Immense&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="ss"&gt;'Winged&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;status&lt;/span&gt; &lt;span class="ss"&gt;'sleeping&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Though on the upside, this is not merely a print routine: It actually returns the naked alist underneath the snytax sugar, so you can mangle it with assoc and subst or whatever other unspeakable horror you wish to do to the Great Dreamer in the Deep.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>So I made a programming language. Now what?</title>
   <link>http://jarcane.github.com/blog/2014/11/18/so-i-made-a-programming-language-now-what.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-11-18-so-i-made-a-programming-language-now-what-html</guid>
   <pubDate>Tue, 18 Nov 2014 10:32:32 UT</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;About a week ago, I had a ridiculous idea. I was in the process of learning some basic Racket macros, and also still following the progress of a couple vintage Lisp dialects for the Tandy Color Computer. Even played around a bit with XLISP in OS&amp;ndash;9. And then someone asked me what a Lambda was.&lt;/p&gt;

&lt;p&gt;Somehow, in the fog of all that (plus a week with a hell of a lot of stress, mostly irrational), came a mad idea. What if someone mashed up BASIC with Lisp? Stranger still, a functionally-oriented BASIC Lisp.&lt;/p&gt;

&lt;p&gt;Then I went and wrote one.&lt;/p&gt;

&lt;p&gt;I called it &lt;a href="https://github.com/jarcane/heresy"&gt;Heresy&lt;/a&gt;, because that seemed like the right name for it.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;With help from a few helpful Racketeers in IRC, I now have a functional dialect of Lisp that borrows heavily from BASIC syntax; a kind of &amp;ldquo;Nutrasweet&amp;rdquo; syntax married with immutable variables and some (I&amp;rsquo;d like to think) vaguely clever use of seemingly imperative constructs executed with functional code.&lt;/p&gt;

&lt;p&gt;It is also now the most well-recieved project I&amp;rsquo;ve ever released, netting 18 stars on Github, almost 3,000 vistors to the repo, and a whole day near the top of Hacker News&amp;rsquo; front page.&lt;/p&gt;

&lt;p&gt;Now, don&amp;rsquo;t get me wrong or think I&amp;rsquo;m letting it get to my head (well, I probably am a little). I fully expect that many of those clicks were more at the very novelty and silliness of the idea. But as ideas go, I&amp;rsquo;ve seen dumber ones succeed, and it&amp;rsquo;s been a useful learning project that fits nicely into my current schedule. The question is though, what do I do with it? Where do I want to go? Is Heresy a way to ease BASIC programmers Lisp? A playground for weird ideas about functional programming?&lt;/p&gt;

&lt;p&gt;Time to establish some ground rules.&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Heresy is BASIC&lt;/em&gt; - Heresy is an heir to BASIC, and aims to be at least somewhat easy for BASIC programmers to learn. Mostly this means we prefer BASIC names over the Lisp name, and naming conventions like the $ for string functions.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Heresy is a Lisp&lt;/em&gt; - Heresy is still a Lisp, and loves simple syntax and s-expressions. While it makes use of some sugaring like literal keywords for certain common primitives, these are best used sparingly. Heresy is the Diet Coke of Evil, just one calorie, not quite evil enough.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Heresy is functional&lt;/em&gt; - Functional, but not Haskell. It is not intended solely as a vehicle for absolute functional purity. I love Haskell. You love Haskell. We don&amp;rsquo;t need to write another Haskell. Think more in terms of a lower-calorie, more intelligible Clojure.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Heresy is for learning&lt;/em&gt; - Heresy started as a learning project for me, a chance to learn how Lisp and functional programming really work on a practical level. I hope that, in time, it can be that for others as well, especially those who grew up with BASIC like me and still sometimes struggle to get their head on this brave new FP world we live in now.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Heresy is an experiment&lt;/em&gt; - Heresy is an experimental language. It&amp;rsquo;s very DNA is as a mad idea that came to life, and it&amp;rsquo;s development should be ready and willing to embrace new mad ideas and run with them. This is where &lt;em&gt;carry&lt;/em&gt; came from, and I hope to have more mad ideas in the future.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;Those are my thoughts for now though. I would like to point your attention to #5 in particular, because one of it&amp;rsquo;s side effects is that any or all of these rules probably will change or be ignored as necessary over time. It also leaves out some things I haven&amp;rsquo;t decided yet, like how much of Heresy should be self-hosted (probably as much as can be borne), or a more specific syntax standard for function names (because ? for preds still looks wrong and un-BASIC to me).&lt;/p&gt;

&lt;p&gt;Heresy is the projection of a fevered imagination still buzzing away with strange new ideas. Think of me less as a BDFL and more of a Mad King gibbering in the dark, still sometimes speaking truth in between the deranged quartos and evocations of elder things from beyond time and space &amp;hellip;&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>