<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Arcane Syntax: Arcane Syntax</title>
  <description>Arcane Syntax: Arcane Syntax</description>
  <link>http://jarcane.github.com/index.html</link>
  <lastBuildDate>Tue, 18 Nov 2014 12:32:32 FLE Standard Time</lastBuildDate>
  <pubDate>Tue, 18 Nov 2014 12:32:32 FLE Standard Time</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>So I made a programming language. Now what?</title>
   <link>http://jarcane.github.com/blog/2014/11/18/so-i-made-a-programming-language-now-what.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-11-18-so-i-made-a-programming-language-now-what-html</guid>
   <pubDate>Tue, 18 Nov 2014 12:32:32 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;About a week ago, I had a ridiculous idea. I was in the process of learning some basic Racket macros, and also still following the progress of a couple vintage Lisp dialects for the Tandy Color Computer. Even played around a bit with XLISP in OS&amp;ndash;9. And then someone asked me what a Lambda was.&lt;/p&gt;

&lt;p&gt;Somehow, in the fog of all that (plus a week with a hell of a lot of stress, mostly irrational), came a mad idea. What if someone mashed up BASIC with Lisp? Stranger still, a functionally-oriented BASIC Lisp.&lt;/p&gt;

&lt;p&gt;Then I went and wrote one.&lt;/p&gt;

&lt;p&gt;I called it &lt;a href="https://github.com/jarcane/heresy"&gt;Heresy&lt;/a&gt;, because that seemed like the right name for it.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;With help from a few helpful Racketeers in IRC, I now have a functional dialect of Lisp that borrows heavily from BASIC syntax; a kind of &amp;ldquo;Nutrasweet&amp;rdquo; syntax married with immutable variables and some (I&amp;rsquo;d like to think) vaguely clever use of seemingly imperative constructs executed with functional code.&lt;/p&gt;

&lt;p&gt;It is also now the most well-recieved project I&amp;rsquo;ve ever released, netting 18 stars on Github, almost 3,000 vistors to the repo, and a whole day near the top of Hacker News&amp;rsquo; front page.&lt;/p&gt;

&lt;p&gt;Now, don&amp;rsquo;t get me wrong or think I&amp;rsquo;m letting it get to my head (well, I probably am a little). I fully expect that many of those clicks were more at the very novelty and silliness of the idea. But as ideas go, I&amp;rsquo;ve seen dumber ones succeed, and it&amp;rsquo;s been a useful learning project that fits nicely into my current schedule. The question is though, what do I do with it? Where do I want to go? Is Heresy a way to ease BASIC programmers Lisp? A playground for weird ideas about functional programming?&lt;/p&gt;

&lt;p&gt;Time to establish some ground rules.&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Heresy is BASIC&lt;/em&gt; - Heresy is an heir to BASIC, and aims to be at least somewhat easy for BASIC programmers to learn. Mostly this means we prefer BASIC names over the Lisp name, and naming conventions like the $ for string functions.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Heresy is a Lisp&lt;/em&gt; - Heresy is still a Lisp, and loves simple syntax and s-expressions. While it makes use of some sugaring like literal keywords for certain common primitives, these are best used sparingly. Heresy is the Diet Coke of Evil, just one calorie, not quite evil enough.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Heresy is functional&lt;/em&gt; - Functional, but not Haskell. It is not intended solely as a vehicle for absolute functional purity. I love Haskell. You love Haskell. We don&amp;rsquo;t need to write another Haskell. Think more in terms of a lower-calorie, more intelligible Clojure.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Heresy is for learning&lt;/em&gt; - Heresy started as a learning project for me, a chance to learn how Lisp and functional programming really work on a practical level. I hope that, in time, it can be that for others as well, especially those who grew up with BASIC like me and still sometimes struggle to get their head on this brave new FP world we live in now.&lt;/p&gt;&lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;&lt;em&gt;Heresy is an experiment&lt;/em&gt; - Heresy is an experimental language. It&amp;rsquo;s very DNA is as a mad idea that came to life, and it&amp;rsquo;s development should be ready and willing to embrace new mad ideas and run with them. This is where &lt;em&gt;carry&lt;/em&gt; came from, and I hope to have more mad ideas in the future.&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;

&lt;p&gt;Those are my thoughts for now though. I would like to point your attention to #5 in particular, because one of it&amp;rsquo;s side effects is that any or all of these rules probably will change or be ignored as necessary over time. It also leaves out some things I haven&amp;rsquo;t decided yet, like how much of Heresy should be self-hosted (probably as much as can be borne), or a more specific syntax standard for function names (because ? for preds still looks wrong and un-BASIC to me).&lt;/p&gt;

&lt;p&gt;Heresy is the projection of a fevered imagination still buzzing away with strange new ideas. Think of me less as a BDFL and more of a Mad King gibbering in the dark, still sometimes speaking truth in between the deranged quartos and evocations of elder things from beyond time and space &amp;hellip;&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>On LET: a brief comparative thesis</title>
   <link>http://jarcane.github.com/blog/2014/11/11/on-let-a-brief-comparative-thesis.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-11-11-on-let-a-brief-comparative-thesis-html</guid>
   <pubDate>Tue, 11 Nov 2014 08:56:05 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;I started programming, as many people my age did, as a kid, with a computer running Microsoft BASIC. Disk Extended Color Basic on a Tandy Color Computer 3, to be precise. I wrote quite a few programs, large and small, as well as modding a few others that came on various Rainbow disks I&amp;rsquo;d cobbled together mostly from either the Internet or an uncle who was far more invested in the scene.&lt;/p&gt;

&lt;p&gt;Thus, when I at last discovered the introduction to macros and language definitions in &lt;em&gt;Realm of Racket&lt;/em&gt;, it struck me that it might be interesting to practice those tools by experimenting with defining a BASIC-Lisp hybrid which I am tentatively tempted to entitle &amp;ldquo;Heresy&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still in the research stages right now, though I&amp;rsquo;m putting code to file today, and in researching how to map keywords from one to the other I discovered a very important clash: LET.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Besides the obvious math operators and so forth, LET is one of the few standard keywords that exists in both BASIC and Lisp languages, but both could not possibly seem to describe more polar opposite functions.&lt;/p&gt;

&lt;p&gt;LET in BASIC is the somewhat deprecated global variable declarator and assigner. Ie.:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LET X = 5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LET in old-school BASIC is probably closer in function to the old Lisp keyword SETQ, in that it is used both to explicitly declare a new variable, but also to set that variable to a new value. It&amp;rsquo;s also distinct from DIM in that DIM was primarily used to declare arrays until much later dialects like QBasic and Visual Basic, and also because it must explicitly assign a value.&lt;/p&gt;

&lt;p&gt;LET in Lisp and Scheme however exist to provide temporary names for local values, usually within a function or a macro. They almost provide for variables what lambdas do for functions, and even allow the definition of new functions as well (either through explicit syntax for this, or by taking advantage of lambdas).&lt;/p&gt;

&lt;p&gt;And yet &amp;hellip; look back at that syntax for the BASIC version again. Both of these terms are coming from the same place: algebra. I am willing to bet that nearly everyone reading this write now has done at least one problem, probably thousands, that started with some statement of &amp;lsquo;let x equal &amp;hellip;.&amp;rsquo; Wiktionary even cites this in the definition of the word as an example: &amp;ldquo;Let P be the point where AB and OX intersect.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;There is of course a reason for this. Lisp is famously based on Church&amp;rsquo;s lambda calculus, and its mathematical pedegree is hardly a secret. Dartmouth BASIC meanwhile was originally made mainly to help students do calculations for their homework assignments, the terminology springing directly from the pages of their algebra and trigonometry assignments.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s in this historical meeting point that we can ask ourselves a question, and answer it.&lt;/p&gt;

&lt;p&gt;Question: how did these two uses of LET evolve into such polar opposites? Answer: They didn&amp;rsquo;t. They both mean the same thing; it&amp;rsquo;s their approach to problem solving that&amp;rsquo;s different.&lt;/p&gt;

&lt;p&gt;Wait, what?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s true. If you go back and look at the exercises and code samples and tools offered in the original Dartmouth BASIC, you realize something about what BASIC programs are meant to be, vs. how Lisp programs are generally approached. Dartmouth BASIC was written for tiny problems, word problems. The domain of a BASIC program was expected to be a single problem, and so the syntax and semantics both were constructed with that goal in mind.&lt;/p&gt;

&lt;p&gt;Lisp on the other hand, while it has diverged over the years into many approaches from the purely functional Clojure to the &amp;lsquo;basically just rewritten C&amp;rsquo; of some Emacs-Lisp code, still fundamentally it comes instead from a logic that was about breaking down one big program into many littler problems, each of which may potentially need to define it&amp;rsquo;s own local variables.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not that LET necessarily means something different etymologically here, both creators were ultimately seeking to define the same tool, but the difference in how they actually work on a practical level and how they came to act as keywords in two very different ways, has more to do with how they approach problems as discrete pieces.&lt;/p&gt;

&lt;p&gt;In the past I&amp;rsquo;ve often defended BASIC, in part on the strength of the revisions made in more purely proceduraly dialects like QBasic, and in part because we BASIC &amp;lsquo;hobbyists&amp;rsquo;, shunned away as we were by the C coders and the elite ASM hackers of the day and since, really often could write code just as procedural and well thought out as any. It&amp;rsquo;s just that the dirty secret, what those sneering outsiders could see that we couldn&amp;rsquo;t, was just how much we were working &lt;em&gt;against&lt;/em&gt; the language to do it. BASIC was asked, and somehow managed, to do things and solve problems far in advance of the scope for which it was ever designed.&lt;/p&gt;

&lt;p&gt;There is actually tail-call-optimization and code for writing recursive macros in &lt;em&gt;FreeBASIC&lt;/em&gt; now (there are, amusingly enough, even a couple simple Lisp interpreters, even an embedded scripting language in Lisp for FB). Of course, this is in FB, a modern dialect of the QBasic branch with at least something more resembling a modern approach, but it still illustrates the fierce devotion that BASIC fans were almost &lt;em&gt;driven to&lt;/em&gt; by their reputation in the wider community.&lt;/p&gt;

&lt;p&gt;These days of course, I look at even QBasic code and shudder to think, but then I also feel the same way looking at Java. And while Heresy kinda started as a joke esolang idea and may stay that way, it interests me to wonder if a &amp;ldquo;Lisp-flavored BASIC&amp;rdquo; might be a genuinely useful dialect for introducing those die-hard BASIC coders to the flexibility of a language that is not still fighting attempts to use it for more than solving simple algebraic equations.&lt;/p&gt;

&lt;p&gt;Of course, I still haven&amp;rsquo;t decided which definition of LET to stick to.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>I am.</title>
   <link>http://jarcane.github.com/blog/2014/10/23/i-am.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-10-23-i-am-html</guid>
   <pubDate>Thu, 23 Oct 2014 10:44:33 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;The following post is mostly about personal matters, and save where those matters affect my progress as a wannabe programmer, probably won&amp;rsquo;t talk about that subject much. So if you don&amp;rsquo;t want to listen to the rantings of a frustrated and depressed individual venting his frustration with life under mental illness, you need not bother clicking past the more link for this one. Sorry.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;My name is John Berry, and I am depressed.&lt;/p&gt;

&lt;p&gt;I fucking hate that word.&lt;/p&gt;

&lt;p&gt;Really, genuinely, truly hate it. With every fiber of my fucking being.&lt;/p&gt;

&lt;p&gt;It is the most inherently fucking trivializing bullshit there is, that word. It&amp;rsquo;s trivializing because you can always, always tack &amp;ldquo;just&amp;rdquo; on the front of it, and people believe it. Even people who &lt;em&gt;are&lt;/em&gt; depressed, like me, get in the habit of that. It doesn&amp;rsquo;t even really truly express with any genuine emphasis what living with it is actually like. The word itself feeds the disease by anointing it with a term that most people use for a mere temporary and justifiable down moment in life, even when what&amp;rsquo;s actually meant is the relentless oppressive influence of a part of your own brain unceasingly pursuing a course of deliberate misery and self-sabotage.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not &amp;ldquo;depressed&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m fucking &lt;em&gt;angry&lt;/em&gt;. I&amp;rsquo;m angry because I was put on this earth with a reasonably creative and intelligent mind that nonetheless has to be dragged kicking and screaming into actually fucking doing anything with it. I am angry because I watch the world go by me at a dizzying pace while I struggle just to keep from getting trampled. I&amp;rsquo;m angry because I see what &amp;ldquo;normal&amp;rdquo; people do every day and I&amp;rsquo;m doing less than half that and I feel like I&amp;rsquo;ve barely enough time and energy to manage that.&lt;/p&gt;

&lt;p&gt;I am sick to fucking death of feeling sick to fucking death. I&amp;rsquo;m sick of spending half my day just trying to stay awake and the other half just trying to force myself to actually do anything other than fall back to the usual useless and unproductive defaults. I&amp;rsquo;m sick of freak panic attacks, sudden headaches, sudden weakness, sudden numbness, loss of appetite, loss of energy, loss of sleep, too much sleep, wild mood swings, emotional vomiting, of some days suddenly being overcome with the desire to just curl up and weep in a corner until I pass out, and of feeling like my whole useless body is simply slowly dying off bit by bit.&lt;/p&gt;

&lt;p&gt;I am afraid. Afraid all the time about everything and anything. Afraid I&amp;rsquo;m going to die. Afraid I&amp;rsquo;m not afraid enough of that idea. Afraid of what I&amp;rsquo;d do if I got any worse than this. Afraid of what my body does to me every day. Afraid I&amp;rsquo;ve lost the ability to tell what&amp;rsquo;s real and what&amp;rsquo;s not, either in my own symptoms or my own thoughts.&lt;/p&gt;

&lt;p&gt;I am out of my goddamn mind. I know it. I don&amp;rsquo;t always know where the line is between rational self-talk and just pure festering evil, but damned if I don&amp;rsquo;t know full well I shouldn&amp;rsquo;t be like this. That feeling sick from some new medication that doesn&amp;rsquo;t work is not an excuse to then go into full fucking internal hysterics. That see-sawing wildly from crushingly depressed, uncontrollably angry, and completely bloody numb.&lt;/p&gt;

&lt;p&gt;Because some days?&lt;/p&gt;

&lt;p&gt;I just &lt;em&gt;am&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I exist. I am alive. And sometimes that feels like the best I can muster, and I don&amp;rsquo;t even know why other than I&amp;rsquo;m terrified of not being so. I don&amp;rsquo;t know what I&amp;rsquo;m doing, I don&amp;rsquo;t know why I&amp;rsquo;m doing it, how I got here, where I&amp;rsquo;m going, anything. I&amp;rsquo;m just waiting out the day until the next one; rinse and repeat. Only now I feel like I&amp;rsquo;m thrust into a situation where I can&amp;rsquo;t even do &lt;em&gt;that&lt;/em&gt; right anymore.&lt;/p&gt;

&lt;p&gt;Every day I get up in the dark and I watch the time already slipping away from me before I&amp;rsquo;ve scarcely even felt awake, before dragging myself to a class I desperately want to be better at, but find myself struggling just to keep up with that kind of concentration and focus requirement. Then I come home and argue with myself until I manage to win and feed myself, and now I get to spend the next few hours feeling guilty and lost about where or what I&amp;rsquo;m even doing programming, until it&amp;rsquo;s time to make dinner and another window of opportunity closes.&lt;/p&gt;

&lt;p&gt;I desperately want to finish this Finnish course, because I&amp;rsquo;m tired of being lost and confused in this country whenever anyone tries to speak to me, but I&amp;rsquo;m struggling like hell just to get there in the mornings. I know I&amp;rsquo;m learning, but I honestly don&amp;rsquo;t even know how at this point. I&amp;rsquo;m on fucking auto-pilot. The captain just gets up and goes to the loo sometimes, or chats up a stewardess, in the middle of conversation sometimes. And of course, when something comes up that&amp;rsquo;s unfamiliar, or sometimes just because the captain&amp;rsquo;s out of the cockpit, I crash into a damn mountain.&lt;/p&gt;

&lt;p&gt;And even once it&amp;rsquo;s done, I don&amp;rsquo;t know what the hell I&amp;rsquo;m going to do with the &lt;em&gt;rest&lt;/em&gt; of my life. I&amp;rsquo;ll just be a reasonably fluent Finnish-speaking jobless, careerless drifter. Roleplaying was never going to pay the bills on my energy level. There are guys who do it, but they write at paces that would make most professional novelists blanch, making up for low pay with insane work hours that I just can&amp;rsquo;t keep up with. And I don&amp;rsquo;t even know where to start finding some other writing focus, and it&amp;rsquo;s not like there&amp;rsquo;s a lot of work in English writing here.&lt;/p&gt;

&lt;p&gt;So I got into programming, because I had the free time, and I did get properly sucked in by the Codecademy approach. Taking that Python course woke me up at last to the realization that I actually did enjoy doing it, I just didn&amp;rsquo;t always know what I was doing as a kid, because I only had my own clueless fumblings and a handful of manuals to work with. But since then, I&amp;rsquo;m fumbling the carry, and I know it. It&amp;rsquo;s right back to how it was every time in the last 10 or 15 years I&amp;rsquo;ve tried to pick it up again: just a lot of blind fumbling, toying with various books and tools and languages until I get bored or frustrated or lost and just give up and get depressed about it. I feel like I&amp;rsquo;ve got so much more progress to make, and I&amp;rsquo;m making none of it, and I do still dread spending all this time finding the love of programming only to wind up working in some awful code factory of Vogonic doom.&lt;/p&gt;

&lt;p&gt;And on top of all of this, or perhaps because of it, my brain just seems to keep getting worse. I am really, honestly fucking losing it lately. Ready to just breakdown on a hair trigger and I don&amp;rsquo;t know how I&amp;rsquo;ve coped. I don&amp;rsquo;t even talk to anyone about it because where do I start? And how do I explain that sometimes there isn&amp;rsquo;t &lt;em&gt;really&lt;/em&gt; a &amp;ldquo;why&amp;rdquo; or an easy fix or fault to be corrected. The reality is that this, all of this huge fucking storm in my head, is just a bad spell of what I&amp;rsquo;ve been dealing with on some level for most of my adult life. The end result of too much stress, not enough sleep, and not enough grip on where I&amp;rsquo;m going and what I&amp;rsquo;m doing, to be able to put up as much of a fight as I might otherwise be able to.&lt;/p&gt;

&lt;p&gt;Even speaking to the doctor about just part of my symptoms felt like trying to explain the Iliad to a tortoise. They just fixate on one thing and ignore the rest, and prescribe shit at random in the hopes that something will make it go away. Sometimes it helps, and then sometimes, like today, I get to go home early because the fucking &lt;em&gt;melatonin&lt;/em&gt; that the doctor gave someone who has &lt;em&gt;energy issues&lt;/em&gt; turns out to not be a good fucking idea because of course it bloody isn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;Still here I am, getting older all the time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=5boNqPH9vv8"&gt;I miss ska.&lt;/a&gt;&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>A Quickstart Guide to Frog and GitHub Pages</title>
   <link>http://jarcane.github.com/blog/2014/10/18/a-quickstart-guide-to-frog-and-github-pages.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-10-18-a-quickstart-guide-to-frog-and-github-pages-html</guid>
   <pubDate>Sat, 18 Oct 2014 12:34:28 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;It was discussed recently on the #racket freenode channel that getting going with Frog might actually be a bit tricky for someone not coming from the Racket ecosystem or unfamiliar with Github Pages. The process is actually pretty straightforward, but the steps involved aren&amp;rsquo;t exactly documented anywhere in one place, and I promised to look into remedying that. Arcane Syntax itself is hosted on GHP, and generated with Frog, so I had some experience in getting it all working and thought I could help.&lt;/p&gt;

&lt;p&gt;Read on past the jump for a quick guide to building a blog in Frog and hosting it on Github Pages.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h3 id="step-1-install-racket"&gt;Step 1: Install Racket&lt;/h3&gt;

&lt;p&gt;Frog is powered by the Racket programming language, and is currently available primarily as a package for Racket, so we&amp;rsquo;ll need that. You can download Racket for your platform, be it *nix, Mac, or Windows, from their &lt;a href="http://download.racket-lang.org/"&gt;web site&lt;/a&gt;. If you&amp;rsquo;re on a Linux or BSD, you might also check your package repo for it, but be sure it&amp;rsquo;s up-to-date: Frog needs Racket 6, and I know at least Debian is still only hosting 5.x.&lt;/p&gt;

&lt;p&gt;Crucially here, you also need to make sure that Racket&amp;rsquo;s root directory is available in your command-line path. Unixen should take care of this automatically, but Windows will need it added to the $PATH if we want this to be a painless process. You&amp;rsquo;ll need to go to the System Control Panel, Advanced System Settings, Environment Variables, and edit Path to include &amp;ldquo;C:\Program Files\Racket&amp;rdquo; for 64-bit Racket or &amp;ldquo;C:\Program Files (x86)\Racket&amp;rdquo; for 32-bit.&lt;/p&gt;

&lt;h3 id="step-2-install-frog"&gt;Step 2: Install Frog&lt;/h3&gt;

&lt;p&gt;As long as Step 1 has gone fine, this part is easy. Go to your command line and do &lt;code&gt;raco pkg install frog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;raco is the Racket command-line swiss army knife, used for everything from compiling executables to installing packages; it&amp;rsquo;ll also be your interface for Frog commands too, now that it&amp;rsquo;s installed.&lt;/p&gt;

&lt;h3 id="step-3-make-a-github-account"&gt;Step 3: Make a Github Account&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://github.com"&gt;GitHub&lt;/a&gt; is a service for hosting source repositories managed by the Git version control system. You can create a new account right from the main page, picking a username, email, and password. It&amp;rsquo;ll ask you what plan you wish to use, with Free as an option so long as you don&amp;rsquo;t mind all your repos being public. It will also send an email to whatever account you gave it, to verify that email for future use for things like password recovery.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; By default, the email address you give Github will be publicly posted on your account profile. If you don&amp;rsquo;t want this to happen, once you&amp;rsquo;ve verified your email address, you can tell it to &amp;lsquo;keep my email address private&amp;rsquo; on the email settings page.&lt;/p&gt;

&lt;h3 id="step-4-install-git"&gt;Step 4: Install Git&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll also need to install Git, because as the previous step alluded to, it&amp;rsquo;s what we&amp;rsquo;re going to use to manage and sync our changes to the blog whenever we generate a new post and so forth.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re on Windows, the path of least resistance here is just to install the &lt;a href="http://windows.github.com"&gt;Github for Windows&lt;/a&gt; client. Ditto for Macs, which have their &lt;a href="https://mac.github.com/"&gt;own client&lt;/a&gt;. It&amp;rsquo;s not without it&amp;rsquo;s wrinkles, but for our purposes it is dead easy. Otherwise, if we&amp;rsquo;re on Unixen, we&amp;rsquo;ll probably need to install it from our package repo of choice.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll also need to do some additional setup things as well, like creating an SSH key for using Git and stuff, which I am going to pass along to the absolutely excellent &lt;a href="https://help.github.com/articles/set-up-git/"&gt;Github Tutorial page&lt;/a&gt; on setting up Git.&lt;/p&gt;

&lt;h3 id="step-5-make-a-repo-for-your-page"&gt;Step 5: Make a Repo for your page&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re logged in to Github, you can just click on the little + symbol on the top bar of the site and choose &amp;ldquo;New Repository&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;For the name, we want to name it after the URL we&amp;rsquo;re going to use to get to our new blog. Github does a really cool thing where a &lt;em&gt;username&lt;/em&gt;.github.com repo will be automatically uploaded and hosted at that URL. So that&amp;rsquo;s what we&amp;rsquo;ll name our repo, using the username we chose in Step 3.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s up to you whether you want it to be public or private, but the latter option is only available if you pay for hosting. You can also provide a description. Don&amp;rsquo;t worry about the .gitignore and license stuff, and we don&amp;rsquo;t really need to make a README either. We actually want our new repo completely empty.&lt;/p&gt;

&lt;h3 id="step-6-make-the-local-mirror-of-our-blog"&gt;Step 6: Make the local mirror of our Blog&lt;/h3&gt;

&lt;p&gt;Guess what! See that page that just appeared when we started an empty repo? It happens to be a complete set of instructions to link our online repository to a local folder on our computer. We just have to know a little bit more on what to do with them.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re on Windows or Mac, and you&amp;rsquo;ve installed the Github client, this is easy as can be: click that green button. If you&amp;rsquo;ve followed the set up instructions I linked in Step 4, that should open it up in our Github client and let us create a local &amp;ldquo;clone&amp;rdquo; of our online repo.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re on Unixen, we want to do the thing it says there under &amp;ldquo;or create a new repository on the command line&amp;rdquo;, save that it&amp;rsquo;s left out an important step: we need to make a folder for all this to happen in! So we revise the instructions too:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir [username].github.com
cd [username].github.com
touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/frogtutorial/frogtutorial.github.com.git
git push -u origin master&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Substitute &lt;code&gt;[username]&lt;/code&gt; for the name you used on Github.&lt;/p&gt;

&lt;h3 id="step-7-build-our-new-blog"&gt;Step 7: Build our new blog&lt;/h3&gt;

&lt;p&gt;Navigate to the directory you created in the previous step in your favorite command-line shell, and do &lt;code&gt;raco frog --init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Frog will now build all the requisite template files to generate your new blog! These will all be on defaults, of course, but you can even run &lt;code&gt;raco frog -bp&lt;/code&gt; and it will build and open your blog in your web browser running on a local webserver. Neat! Hit Ctrl-C to stop the server if you don&amp;rsquo;t want it to stay running.&lt;/p&gt;

&lt;h3 id="step-8-customize-our-blog"&gt;Step 8: Customize our Blog&lt;/h3&gt;

&lt;p&gt;Right now though, our blog is pretty generic. It&amp;rsquo;s all on defaults! We can change some of the most common settings and details from the &lt;code&gt;.frogrc&lt;/code&gt; file that lives in the root of our site folder. Open it up in your favorite text editor.&lt;/p&gt;

&lt;p&gt;Crucially, we really need to change the URL, to match the URL of our Github page: &lt;code&gt;http://[username].github.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can also change the title and author here, as well as some settings about how Frog generates pages, which are all helpfully described right there in the file. We don&amp;rsquo;t really need to mess with any of them for now though.&lt;/p&gt;

&lt;p&gt;We can also tell it which text editor we use, by giving it the name of the executable. This is useful because we can follow up with some helpful frog command to open the editor to the last new post we told it to make.&lt;/p&gt;

&lt;p&gt;The default templates that Frog uses to generate pages are also tweakable, if you know some HTML and so forth, and it uses Bootstrap for making a pretty site; so you can use Bootstrap templates like those on &lt;a href="http://bootswatch.com/"&gt;Bootswatch&lt;/a&gt; to jazz it up from the basic template. I&amp;rsquo;ve also written a short little guide for setting up &lt;a href="http://jarcane.github.io/blog/2014/09/16/disqus-comments-with-frog.html"&gt;Disqus comments&lt;/a&gt; properly.&lt;/p&gt;

&lt;h3 id="step-9-generate-a-new-post"&gt;Step 9: Generate a new post&lt;/h3&gt;

&lt;p&gt;So let&amp;rsquo;s make a post to our new blog! Once more from our blog&amp;rsquo;s home folder, we can do &lt;code&gt;raco frog -n "[post title]"&lt;/code&gt;. It will helpfully display the name of the Markdown file it just generated to be the template of our new post.&lt;/p&gt;

&lt;p&gt;You can open up this .md file in your favorite text editor or run &lt;code&gt;raco frog --edit&lt;/code&gt; if we&amp;rsquo;ve set that up.&lt;/p&gt;

&lt;p&gt;Frog files are in the form of Markdown, which is a handy little markup language invented by John Gruber that makes pretty looking text files that also parse semi-easily to equally pretty HTML. Mr. Gruber has a helpful guide for the basics on his page defining &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A new Frog post already includes some boilerplate stuff: a block at the top with title, date/time, and tags, some filler text, and a &lt;code&gt;more&lt;/code&gt; tag for marking a break in the text between what&amp;rsquo;s shown in your main blog page and what&amp;rsquo;s only shown by clicking through to individual posts.&lt;/p&gt;

&lt;p&gt;The filler text can be replaced, the more tag removed or placed where you like, but crucially, you &lt;em&gt;MUST&lt;/em&gt; change the DRAFT tag to something else, or else Frog will skip it when you build the blog!&lt;/p&gt;

&lt;h3 id="step-10-build-your-blog"&gt;Step 10: Build your blog&lt;/h3&gt;

&lt;p&gt;Save your text file, and now we can rebuild the blog to include it. Do the following on the command line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;raco frog -c  *clears any old cached files, don't forget this!*
*then*
raco frog -bp  *if you want to see a preview*
*or just*
raco frog -b  *if you don't*&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything looks satisfactory, proceed to step 11. Otherwise, tweak things as needed and redo the build.&lt;/p&gt;

&lt;h3 id="step-11-sync-your-changes-with-github"&gt;Step 11: Sync your changes with Github&lt;/h3&gt;

&lt;p&gt;Now we need to commit and upload our newly built blog to Github to host.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re on Windows or Mac and using the Github client, this can be done by clicking on our repo, adding a summary and description under &amp;ldquo;Uncommitted Changes&amp;rdquo;, clicking &amp;ldquo;Commit to master&amp;rdquo;, then finally clicking the Sync button on the upper right.&lt;/p&gt;

&lt;p&gt;If we&amp;rsquo;re on Unixen, we do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add -A
git commit -m "Some kind of short description"
git push&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once everything is uploaded, and accounting for a bit of time for Github itself to recognize that stuff lives there now, we should be able to see our new blog online at &lt;code&gt;http://[username].github.com&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;If you want any more help with Frog, be sure to check out the &lt;a href="https://github.com/greghendershott/frog"&gt;Frog repo&lt;/a&gt;, and if you&amp;rsquo;ve any questions about Git or Github, their help files are surprisingly helpful and informative. Enjoy!&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Sort in a Tweet</title>
   <link>http://jarcane.github.com/blog/2014/10/10/sort-in-a-tweet.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-10-10-sort-in-a-tweet-html</guid>
   <pubDate>Fri, 10 Oct 2014 23:00:29 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;Sometimes I just can&amp;rsquo;t leave well enough alone. After my last post I dove into further simplifying my Racket code, and as a fun way of &lt;a href="https://twitter.com/J_Arcane"&gt;relaunching my Twitter&lt;/a&gt; I decided to take the lock back off with a bang by code-golfing the sort algorithm down to fit in a tweet.&lt;/p&gt;

&lt;p&gt;With some extra pointers from Rosetta Code and Jens Axel Soegaard in the #racket channel, I boiled it down to &lt;a href="https://twitter.com/J_Arcane/status/520664571858911232"&gt;this tweet&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang racket&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))" style="color: inherit"&gt;define&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/match.html#(form._((lib._racket/match..rkt)._match))" style="color: inherit"&gt;match&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;()][&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;h&lt;/span&gt; &lt;span class="o"&gt;.,&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._filter))" style="color: inherit"&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/procedures.html#(def._((lib._racket/function..rkt)._curry))" style="color: inherit"&gt;curry&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/procedures.html#(def._((lib._racket/function..rkt)._negate))" style="color: inherit"&gt;negate&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;h,@&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;s&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._filter))" style="color: inherit"&gt;filter&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/procedures.html#(def._((lib._racket/function..rkt)._curry))" style="color: inherit"&gt;curry&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="nv"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))]))&lt;/span&gt;&lt;span class="c1"&gt;;(sort fun list)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I also debuted a new personal logo, developed entirely in Racket using the Racket image libraries. I was inspired by the shape of the &lt;a href="http://en.wikipedia.org/wiki/Lambda_phage"&gt;lambda phage&lt;/a&gt; and the Plague Inc. computer game to create a new lambda logo:&lt;/p&gt;

&lt;div class="figure"&gt;&lt;img src="http://i.imgur.com/xHfZ0a2.png" alt="The Lambdemic Logo" /&gt;
 &lt;p class="caption"&gt;The Lambdemic Logo&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;This can be helpfully generated with the following piece of Racket code:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang racket&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))" style="color: inherit"&gt;require&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;pict&lt;/span&gt;
         &lt;span class="nv"&gt;images/icons/style&lt;/span&gt;
         &lt;span class="nv"&gt;images/icons/symbol&lt;/span&gt;
         &lt;span class="nv"&gt;images/icons/misc&lt;/span&gt;
         &lt;span class="nv"&gt;file/convertible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))" style="color: inherit"&gt;define&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lambda-phage&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pict-&amp;gt;bitmap&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cc-superimpose&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bitmap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;regular-polygon-icon&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; 
                                  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))" style="color: inherit"&gt;*&lt;/a&gt; &lt;/span&gt;&lt;span class="m"&gt;-1/2&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))" style="color: inherit"&gt;-&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))" style="color: inherit"&gt;/&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._pi))" style="color: inherit"&gt;pi&lt;/a&gt;&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))" style="color: inherit"&gt;*&lt;/a&gt; &lt;/span&gt;&lt;span class="m"&gt;1/2&lt;/span&gt; &lt;span class="nv"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._pi))" style="color: inherit"&gt;pi&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
                                  &lt;span class="kd"&gt;#:color&lt;/span&gt; &lt;span class="s"&gt;"darkred"&lt;/span&gt;
                                  &lt;span class="kd"&gt;#:height&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt; 
                                  &lt;span class="kd"&gt;#:material&lt;/span&gt; &lt;span class="nv"&gt;glass-icon-material&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;bitmap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lambda-icon&lt;/span&gt; &lt;span class="kd"&gt;#:height&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))" style="color: inherit"&gt;*&lt;/a&gt; &lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt; &lt;span class="m"&gt;3/4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                         &lt;span class="kd"&gt;#:color&lt;/span&gt; &lt;span class="s"&gt;"white"&lt;/span&gt;
                         &lt;span class="kd"&gt;#:material&lt;/span&gt; &lt;span class="nv"&gt;plastic-icon-material&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))" style="color: inherit"&gt;send&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;lambda-phage&lt;/span&gt; &lt;span class="nv"&gt;save-file&lt;/span&gt; &lt;span class="s"&gt;"lambdemic-big.png"&lt;/span&gt; &lt;span class="ss"&gt;'png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;And for that amusing little banner image:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="kn"&gt;#lang racket&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))" style="color: inherit"&gt;require&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;pict&lt;/span&gt;
         &lt;span class="nv"&gt;pict/code&lt;/span&gt;
         &lt;span class="nv"&gt;file/convertible&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))" style="color: inherit"&gt;define&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;define-universe&lt;/span&gt;  
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;pict-&amp;gt;bitmap&lt;/span&gt;
   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cc-superimpose&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;colorize&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;filled-rounded-rectangle&lt;/span&gt;  &lt;span class="mi"&gt;1500&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s"&gt;"Moccasin"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/parameters.html#(form._((lib._racket/private/more-scheme..rkt)._parameterize))" style="color: inherit"&gt;parameterize&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nf"&gt;current-code-font&lt;/span&gt; &lt;span class="s"&gt;"Envy Code R"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nf"&gt;get-current-code-font-size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))" style="color: inherit"&gt;lambda&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;code&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))" style="color: inherit"&gt;begin&lt;/a&gt;&lt;/span&gt;
              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))" style="color: inherit"&gt;define&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;universe&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))" style="color: inherit"&gt;void&lt;/a&gt;&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))" style="color: inherit"&gt;send&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;define-universe&lt;/span&gt; &lt;span class="nv"&gt;save-file&lt;/span&gt; &lt;span class="s"&gt;"define-universe.png"&lt;/span&gt; &lt;span class="ss"&gt;'png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Correction and refactoring</title>
   <link>http://jarcane.github.com/blog/2014/10/10/correction-and-refactoring.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-10-10-correction-and-refactoring-html</guid>
   <pubDate>Fri, 10 Oct 2014 19:20:23 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;I was thinking again this evening about last week&amp;rsquo;s quicksort post (which I&amp;rsquo;ve since even been informed isn&amp;rsquo;t technically a quicksort algorithm), and decided to tinker with streamlining my Racket version a bit more to take better advantage of higher-order functions.&lt;/p&gt;

&lt;p&gt;To my horror I realized in looking at last week&amp;rsquo;s code I&amp;rsquo;d actually munged up the qs&amp;ndash;2 version, which should look like this:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))" style="color: inherit"&gt;define&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs-2&lt;/span&gt; &lt;span class="nv"&gt;fun&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))" style="color: inherit"&gt;if&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._empty~3f))" style="color: inherit"&gt;empty?&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;lst&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))" style="color: inherit"&gt;let*&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;hd&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))" style="color: inherit"&gt;car&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))" style="color: inherit"&gt;cdr&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;smaller&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs-2&lt;/span&gt; &lt;span class="nv"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))" style="color: inherit"&gt;for/list&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;#:when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fun&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;hd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;larger&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs-2&lt;/span&gt; &lt;span class="nv"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))" style="color: inherit"&gt;for/list&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;#:when&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/procedures.html#(def._((lib._racket/function..rkt)._negate))" style="color: inherit"&gt;negate&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;hd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
		 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._flatten))" style="color: inherit"&gt;flatten&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))" style="color: inherit"&gt;cons&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;smaller&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))" style="color: inherit"&gt;cons&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;hd&lt;/span&gt; &lt;span class="nv"&gt;larger&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;However, as it turns out, Racket actually has built-ins for function currying, and as well, filter&amp;rsquo;s really a better (and Lispier) function here than a for loop, so we can actually match the Haskell version&amp;rsquo;s line count like so.&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))" style="color: inherit"&gt;define&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs-3&lt;/span&gt; &lt;span class="nv"&gt;fun&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))" style="color: inherit"&gt;if&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._empty~3f))" style="color: inherit"&gt;empty?&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;lst&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))" style="color: inherit"&gt;let&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;smaller&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs-3&lt;/span&gt; &lt;span class="nv"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._filter))" style="color: inherit"&gt;filter&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/procedures.html#(def._((lib._racket/function..rkt)._curryr))" style="color: inherit"&gt;curryr&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;fun&lt;/span&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))" style="color: inherit"&gt;car&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))" style="color: inherit"&gt;cdr&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;larger&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs-3&lt;/span&gt; &lt;span class="nv"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._filter))" style="color: inherit"&gt;filter&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/procedures.html#(def._((lib._racket/function..rkt)._curryr))" style="color: inherit"&gt;curryr&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/procedures.html#(def._((lib._racket/function..rkt)._negate))" style="color: inherit"&gt;negate&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))" style="color: inherit"&gt;car&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))" style="color: inherit"&gt;cdr&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
		&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._flatten))" style="color: inherit"&gt;flatten&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))" style="color: inherit"&gt;cons&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;smaller&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))" style="color: inherit"&gt;cons&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))" style="color: inherit"&gt;car&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;larger&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Voila. Now we have a version that is both Lispier and makes better use of higher-order functions. Alas, we still can&amp;rsquo;t universalize it in so little space (that I know of anyway). The Ord typeclass is one powerful little bugger.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Haskell is Cool</title>
   <link>http://jarcane.github.com/blog/2014/10/03/haskell-is-cool.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-10-03-haskell-is-cool-html</guid>
   <pubDate>Fri, 03 Oct 2014 23:25:10 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;After my last post and some thinking, I ultimately settled on &lt;em&gt;Learn You a Haskell&lt;/em&gt; as my next book to work through, and after some initial hassles trying to get a decent working environment set up, I must say that I&amp;rsquo;m quite enjoying the language itself. It was running across &lt;a href="http://tryhaskell.org/"&gt;Try Haskell&lt;/a&gt; that actually spurred me to finally take the leap in that direction (seriously, online REPLs are the best language demos period), and I was quickly impressed by the power hiding in that seemingly obtuse syntax.&lt;/p&gt;

&lt;p&gt;And of course, like everyone else ever (so many that &lt;em&gt;Learn You a Haskell&lt;/em&gt; actually makes a bit of a joke out of it), I was impressed as hell with the Haskell quicksort solution.&lt;/p&gt;

&lt;p&gt;But after some tinkering in Racket, not for precisely the same reasons as the book uses it.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;For reference, the Haskell recursive quicksort looks like this:&lt;/p&gt;

&lt;div class="brush: haskell"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="nf"&gt;quicksort&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Ord&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nf"&gt;quicksort&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;[]&lt;/span&gt;
&lt;span class="nf"&gt;quicksort&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="kt"&gt;:&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
    &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="n"&gt;smallerSorted&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quicksort&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;biggerSorted&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;quicksort&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;smallerSorted&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;biggerSorted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I know, right? It&amp;rsquo;s short and sweet, and using multiple recursion and list filtering to solve it takes a hell of a lot of the work out of it. Hell, this is actually the first version of quicksort I&amp;rsquo;ve ever understood; though in my defense the last time I tried to write a quicksort was some 15 years ago as a teenage BASIC hacker (I failed. Repeatedly.)&lt;/p&gt;

&lt;p&gt;The book of course uses it as an example of the power of recursion, and it is indeed a good example of where clever use of that can do a lot in very little space (though personally I think the lazy factorial method is a cooler example), but the thing is that any language that implements good recursion can do the same algorithm and just as fast.&lt;/p&gt;

&lt;p&gt;For instance, Racket can do the exact same algorithm in just a few more lines (most of them in this case for clarity and convenience, semantically it&amp;rsquo;s &lt;em&gt;almost&lt;/em&gt; identical [but not quite, and I&amp;rsquo;ll get to why]).&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))" style="color: inherit"&gt;define&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))" style="color: inherit"&gt;if&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._empty~3f))" style="color: inherit"&gt;empty?&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;lst&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))" style="color: inherit"&gt;let*&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;hd&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))" style="color: inherit"&gt;car&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))" style="color: inherit"&gt;cdr&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;smaller&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))" style="color: inherit"&gt;for/list&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;#:when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))" style="color: inherit"&gt;&amp;lt;=&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;hd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;larger&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))" style="color: inherit"&gt;for/list&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;#:when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))" style="color: inherit"&gt;&amp;gt;&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;hd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
		 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._flatten))" style="color: inherit"&gt;flatten&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))" style="color: inherit"&gt;cons&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;smaller&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))" style="color: inherit"&gt;cons&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;hd&lt;/span&gt; &lt;span class="nv"&gt;larger&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So clearly, it&amp;rsquo;s not exactly the &lt;em&gt;recursion&lt;/em&gt; that makes the example so cool. No, what makes the Haskell version cool is when you realize what it can do that our Racket port can&amp;rsquo;t: anything but numbers. The Haskell quicksort can readily handle numbers, strings, or lists of chars, all thanks to the power of this line right here:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quicksort :: (Ord a) =&amp;gt; [a] -&amp;gt; [a]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Especially&lt;/em&gt; the &lt;code&gt;(Ord a)&lt;/code&gt; bit: that&amp;rsquo;s the Ord typeclass, which imports types that Haskell knows how to put in order, thus allowing a statically typed language to still nonetheless use the same &amp;lt;= operator regardless of what type is actually being fed it (the other part of that feat is the &lt;code&gt;[a]&lt;/code&gt; bit, the generics).&lt;/p&gt;

&lt;p&gt;To be able to get a similarly powerful, if not as convenient function, we have to upgrade our Racket version a bit:&lt;/p&gt;

&lt;div class="brush: racket"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))" style="color: inherit"&gt;define&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs-2&lt;/span&gt; &lt;span class="nv"&gt;fun&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))" style="color: inherit"&gt;if&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._empty~3f))" style="color: inherit"&gt;empty?&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nv"&gt;lst&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&lt;a href="http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))" style="color: inherit"&gt;let*&lt;/a&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;hd&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))" style="color: inherit"&gt;car&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;tl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))" style="color: inherit"&gt;cdr&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;lst&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;smaller&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))" style="color: inherit"&gt;for/list&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;#:when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fun&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;hd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;larger&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;qs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))" style="color: inherit"&gt;for/list&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;tl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;#:when&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/procedures.html#(def._((lib._racket/function..rkt)._negate))" style="color: inherit"&gt;negate&lt;/a&gt;&lt;/span&gt; &lt;span class="nv"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="nv"&gt;hd&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._flatten))" style="color: inherit"&gt;flatten&lt;/a&gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))" style="color: inherit"&gt;cons&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;smaller&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&lt;a href="http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))" style="color: inherit"&gt;cons&lt;/a&gt; &lt;/span&gt;&lt;span class="nv"&gt;hd&lt;/span&gt; &lt;span class="nv"&gt;larger&lt;/span&gt;&lt;span class="p"&gt;))))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now our Racket quicksort has become a higher-order function, and must be passed the less-than function it will use to find &lt;em&gt;smaller&lt;/em&gt; as well as negate to find &lt;em&gt;larger&lt;/em&gt;. But it&amp;rsquo;s still not exactly replicated the feat that Haskell&amp;rsquo;s version would, and doing so directly would mean a whole range of type checks. It is almost certainly possible, but not in so concise a manner.&lt;/p&gt;

&lt;p&gt;And of course, some of this difference comes from Haskell&amp;rsquo;s special little rules, like lists being mono-typed elements (as opposed to Racket&amp;rsquo;s free-wheeling ones); this is more limiting but also means that functions like quicksort can largely be written to assume a list will behave with it. If we pass it a list from elsewhere in our program, it will still work as long as its members are members of Ord.&lt;/p&gt;

&lt;p&gt;The amusing footnote to this is that the easy solution for Racket is to make it a higher-order function (and in fact, this is even what Racket&amp;rsquo;s built-in &lt;a href="http://docs.racket-lang.org/reference/pairs.html#%28def._%28%28lib._racket%2Fprivate%2Flist..rkt%29._sort%29%29"&gt;sort&lt;/a&gt; does), whereas in &lt;em&gt;Learn You a Haskell&lt;/em&gt; the author doesn&amp;rsquo;t even get to higher-order functions until the chapter after the quicksort example.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Learning Programming: the Backlog</title>
   <link>http://jarcane.github.com/blog/2014/09/29/learning-programming-the-backlog.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-29-learning-programming-the-backlog-html</guid>
   <pubDate>Mon, 29 Sep 2014 23:08:19 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;Thus far, I have been back to programming for a vanishingly small amount of time, roughly three months by Github commit reckoning (plus a bit of time spent in Codecademy). In that time it has seemed, to myself and even to others to a lesser extent, rather remarkable the amount of progress I&amp;rsquo;ve made. In just that three months and change I&amp;rsquo;ve written a roguelike game, an old-fashioned line editor, a text graphics wrapper, an esolang, a virtual machine, a basic weblog, and even taken over as chief maintainer of an open source project for the first time.&lt;/p&gt;

&lt;p&gt;Thus by all appearances, it seems like I&amp;rsquo;ve already learned a lot, and in some ways that&amp;rsquo;s true.&lt;/p&gt;

&lt;p&gt;In other ways, it&amp;rsquo;s not.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;What I have learned thus far, more than anything, is that in actuality for someone with a particular frame of mind and some grasp of logical thinking and problem solving, it is relatively easy to make a seemingly large amount of apparenty progress as a programmer in a very short span of time.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;I&amp;rsquo;ve realized that it is very easy to get fairly far in programming with just a little bit of knowlege and some basic logic skills, but then when you start wanting to push just a bit farther than that, the whole sense of progress collapses like a house of cards &amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And the thing is, this can be a very dangerous trap, for learning anything. A crucial time, one I&amp;rsquo;m frankly wrestling with. When learning (or re-learning) a new skill, there&amp;rsquo;s a point at which the &amp;ldquo;good start&amp;rdquo; you&amp;rsquo;ve made is actually a hindrance. You &lt;em&gt;can&lt;/em&gt; become a programmer in 28 days.&lt;/p&gt;

&lt;p&gt;You might even be decent at it, given some more practice, if you&amp;rsquo;ve the head for it and all you want to do is be a &lt;a href="http://www.paulgraham.com/avg.html"&gt;&amp;ldquo;Blub&amp;rdquo;&lt;/a&gt; coder for life. In the old days this was how a lot of working programmers got started, and cubicle farms the world over are similarly filled with these. The local Java apprenticeship program I think lasts all of three months. Many so-called &amp;ldquo;hacker schools&amp;rdquo; and &amp;ldquo;bootcamps&amp;rdquo; more or less crash-course young minds through an easy language like Ruby or Python in a matter of weeks and send them off into the world $10,000 poorer and with all the coding knowledge of the average Codecademy user.&lt;/p&gt;

&lt;p&gt;To be a &lt;em&gt;good&lt;/em&gt; one, though, even a &lt;em&gt;great&lt;/em&gt; one, you need to be willing to set aside that &amp;ldquo;good start&amp;rdquo; and keep building back on the fundamentals again and again. And when you already have that start, when you already feel like you &lt;em&gt;are&lt;/em&gt; &amp;ldquo;good enough,&amp;rdquo; it&amp;rsquo;s incredibly hard to force yourself to go back to feeling like you&amp;rsquo;ve no idea what you&amp;rsquo;re doing all over again.&lt;/p&gt;

&lt;p&gt;I programmed when I was younger, quite a lot in fact, and that skill never quite decays, so that plus some great re-introductory material seemed to be catapulting me into the stratosphere at a rate not dissimilar from my foray into book publishing. There was a window when I think I was even getting a bit cocky about it. Racket was good for breaking this. The basics of Racket are as easy to grasp as any other, probably the easiest Lisp to learn, with some pretty good intro books and guides. But those advanced topics, the language tools, the contracts, the dialects, all hang there in the Guide sidebar reminding you of just how much more there is to learn. And hanging out with the PLT crew, and the #esolang hackers, and other similarly smart folk (seriously the smartest people I&amp;rsquo;ve ever met in programming were either esolang nerds or Lispers or one flavor or another), is also hugely eye-opening for a cocky young sprat.&lt;/p&gt;

&lt;p&gt;This is all one reason why I&amp;rsquo;ve picked up quite a bit of backlog of books to study, probably enough to fill a year&amp;rsquo;s university curriculum at a minimum. Now that the rambling phase of the post is over, I thought it might be useful to someone or simply for posterity to catalog my current &amp;ldquo;learn stack&amp;rdquo;. These are the books I want to tackle in the near-ish future, though in what order and which next is still the subject of some debate.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/"&gt;How To Design Programs&lt;/a&gt; - I&amp;rsquo;ve started this book twice. Both times I&amp;rsquo;ve got impatient or distracted and gone on to something that seemed to be leading me towards more direct progress; it has a very particular style of design it teaches that I found a bit odd, and the focus on &amp;ldquo;learning languages&amp;rdquo; was a bit frustrating when all I really wanted to do was learn more about Racket proper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-1.html"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt; - Anyone who is reading this probably already is at least familiar with this name. It seems to be perhaps one of the most well-regarded books on programming and CS there is; almost no one I&amp;rsquo;ve ever spoken to about it had anything but glowing praise, even the ones who didn&amp;rsquo;t even write Scheme or Lisp anymore. I&amp;rsquo;m definitely curious, especially as it covers a lot of systems programming stuff that seems to be where my mind wants to go as a programmer. (For similar reasons, I&amp;rsquo;m also really interested in &lt;a href="http://cs.brown.edu/courses/cs173/2012/book/"&gt;PLAI&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.buildyourownlisp.com/"&gt;Build Your Own Lisp&lt;/a&gt; - An unusual approach for a new language introduction, this book aims to teach the reader C by walking them through the development of a dialect of Lisp. I&amp;rsquo;m a bit suspicious of some of the design decisions (it controversially avoids dealing with quote and macros by replacing them with something called &amp;ldquo;Q-expressions&amp;rdquo;), but C is a good language to know and this seems like a fun way to learn it. In a similar vein, there is &lt;a href="https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours"&gt;Write Yourself A Scheme in 48 Hours&lt;/a&gt;, which aims to give a crash course in Haskell by teaching you how to build a basic Scheme interpreter with it. This leads to my next pick:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://learnyouahaskell.com/"&gt;Learn You a Haskel for Great Good&lt;/a&gt; - I am deeply curious about Haskell, because I am deeply curious about functional programming and also by the unusual arcaneness of it. This book seems to be a fan favorite, as it were, and the tone is certainly inviting. There&amp;rsquo;s also an &lt;a href="http://learnyousomeerlang.com/"&gt;Erlang book&lt;/a&gt; inspired by it, which I&amp;rsquo;m more interested for professional reasons: it was invented next-door, as it were, so there&amp;rsquo;s a fair number of jobs about in Erlang still.&lt;/p&gt;

&lt;p&gt;I think the next book I tackle will be one of these, I just haven&amp;rsquo;t decided which yet. I&amp;rsquo;m very open to advice, so feel free to leave your thoughts in the comments, as opinionated as you like.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>HateStack: The self-deleting rantbin</title>
   <link>http://jarcane.github.com/blog/2014/09/28/hatestack-the-self-deleting-rantbin.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-28-hatestack-the-self-deleting-rantbin-html</guid>
   <pubDate>Sun, 28 Sep 2014 23:13:13 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;Inspired by a tweet that Zoe Quinn made the other day, I knocked out a little web app over the weekend for a self-deleting public blogthing. The original spec was a social network that worked like a SnapChat for text, in which the user could post an angry rant with the assurance that it would be automatically deleted in 30 minutes&amp;rsquo; time.&lt;/p&gt;

&lt;p&gt;Taking that a step further, in part to limit its utility for nefarious purposes and also in part to keep the project simple, I adapted this to a single-page stack model, with post contents dwelling entirely within memory to ensure maximum privacy. Gone is gone, here, no database remnants or temporary files.&lt;/p&gt;

&lt;p&gt;The result is &lt;a href="https://t.co/bX5kiqZSm7"&gt;HateStack&lt;/a&gt;, a simple Racket web application in a single 172-line file, with layout assistance from Bootstrap (helpfully imported by BootstrapCDN). It&amp;rsquo;s not yet hosted anywhere; to be honest I&amp;rsquo;m not in a great hurry to go wrestling with yet another server when I&amp;rsquo;ve still probably got work to do on &lt;a href="http://try-racket.org"&gt;Try Racket&lt;/a&gt;. But it was an interesting little project that gave me a chance to tinker a bit more with my HTML/CSS skills, and thus be reminded why most of the time I play around with almost anything else besides web applications &amp;hellip;&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Announcing try-racket.org</title>
   <link>http://jarcane.github.com/blog/2014/09/23/announcing-try-racket-org.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-23-announcing-try-racket-org-html</guid>
   <pubDate>Tue, 23 Sep 2014 20:10:45 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;It is my pleasure to announce that at long last, Racket has an online REPL. I&amp;rsquo;ve taken it upon myself to acquire a domain and a DigitalOcean droplet, and hosted the long-mothballed Try Racket code which you can find at &lt;a href="http://try-racket.org"&gt;http://try-racket.org&lt;/a&gt;. The PLT folks have also kindly offered an alternate URL at &lt;a href="http://try.racket-lang.org"&gt;http://try.racket-lang.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also taken up the responsibility of maintaining the code: I had to fork it by necessity to modify some things necessary to get it to run without X, and as the original maintainer had no interest in pursuing it further than that, he asked me if I&amp;rsquo;d like to take over. You can thus find my fork of it &lt;a href="https://github.com/jarcane/try-racket"&gt;here&lt;/a&gt;, where future issues and development should take place.&lt;/p&gt;

&lt;p&gt;The code&amp;rsquo;s still a bit rough, with a number of issues to be resolved, and I welcome any and all contributions to the code; pull requests will be tested and then accepted so long as they don&amp;rsquo;t appear to be breaking anything. In particular, it seems the memory constraints for the sandbox need revision to prevent a server crash, and there is some amount of demand for proper multi-line entry in the style of the offline Racket REPL. The tutorial is a bit tedious without it at present.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Trying a new theme</title>
   <link>http://jarcane.github.com/blog/2014/09/20/trying-a-new-theme.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-20-trying-a-new-theme-html</guid>
   <pubDate>Sat, 20 Sep 2014 15:43:43 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;It would appear that Bootswatch has been updated to Boostrap 3, because I was able to install Slate without any apparent issue. Let me know if you notice anything. I&amp;rsquo;m also testing some issues with Frog giving me grief on builds.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Apologizing for exuberance</title>
   <link>http://jarcane.github.com/blog/2014/09/19/apologizing-for-exuberance.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-19-apologizing-for-exuberance-html</guid>
   <pubDate>Fri, 19 Sep 2014 10:53:59 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;So after some further consideration, I think I am not really the person to reinvent the internet filter. I have a lot of learning to do before I could possibly tackle something like that in anything like a useful manner. It&amp;rsquo;s possible I could hack together a pretty simple word-frequency model, but I&amp;rsquo;m not at all certain I could really go beyond that; I&amp;rsquo;m not an AI programmer, nor do I have any experience with natural language processing. My experience so far has mostly been with basic systems programming and game design. It&amp;rsquo;s probable I&amp;rsquo;ll return to the problem in the distant future, but for right now I think it&amp;rsquo;s best I leave such a task to more capable hands.&lt;/p&gt;

&lt;p&gt;I just get frustrated. I feel like I actually want to &lt;em&gt;do&lt;/em&gt; something about the shit that&amp;rsquo;s going on, besides just spreading the word about it and condemning it. That is, to me, literally the least I can do. Hell, if I &lt;em&gt;didn&amp;rsquo;t&lt;/em&gt; do that, I&amp;rsquo;d think rather ill of myself, frankly.&lt;/p&gt;

&lt;p&gt;I am merely a writer, ultimately, be it in code, in prose, or in games. And as I said before, when all the tools you have are words, but the jackals have not ears to hear or eyes to read those words, it can feel like a bit of a useless talent. Instead perhaps the best I can do is, if not contributing to the fight for equality necessarily, at least to the fight for a better class of game that speaks to broader themes and more inclusive worlds than more manshoots and bald-man-saves-the-world games. Recent events have really done havoc to my motivation and enthusiasm for gaming; but maybe if I can write something I &lt;em&gt;am&lt;/em&gt; enthusiastic about, it might come back. If good writing and creativity are &amp;ldquo;killing games&amp;rdquo;, then maybe I should take up the hatchet as well&amp;hellip;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m curious what others think, especially those women who&amp;rsquo;re facing this mess. What can I do? Or even, &lt;em&gt;should&lt;/em&gt; I be doing anything other than what I have been; after all, it&amp;rsquo;s your voice far more than mine that needs to be heard right now.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>We need a new filter</title>
   <link>http://jarcane.github.com/blog/2014/09/17/we-need-a-new-filter.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-17-we-need-a-new-filter-html</guid>
   <pubDate>Wed, 17 Sep 2014 10:43:53 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;In the wake of recent events in the gaming sphere, I&amp;rsquo;ve been thinking a good hard think. Harassment on the internet is becoming a major societal problem. People&amp;rsquo;s lives are being threatened. Women are bombarded with abuse on an unconscionable scale. Something needs to be done: we can talk until we&amp;rsquo;re blue in the face about why sending someone violent threats and harassment is wrong, but the harassers aren&amp;rsquo;t listening.&lt;/p&gt;

&lt;p&gt;What we need, is an abuse filter.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Since the public birth of the internet, millions, possibly even billions of dollars have been spent in pursuit of building a better spam filter. Countless man-hours have been dedicated to finding new ways of identifying and properly filing away to /dev/null the endless torrent of garbage emails about Viagra and Nigerian princes.&lt;/p&gt;

&lt;p&gt;And yet, where are the millions spent on solutions for internet harassment? The countless man-or-woman-hours poured into making life on the internet less an endless free-fire zone for abusive sociopaths?&lt;/p&gt;

&lt;p&gt;Most existing social media systems rely entirely on user reporting, essentially leaving it to the user to manually report and block each and every abusive message. This is about as ludicrous a task to demand as it would be for spam. Especially for those targeted by concerted campaigns like #gamergate/#quinnspiracy, this is more or less an intractable problem. Props aplenty for the courage of women like Zoe Quinn and Anita Sarkeesian who&amp;rsquo;ve stuck it out and even done that work, but they never should&amp;rsquo;ve had to do it in the first place, and many choose simply to leave rather than deal with it. Some very talented women and men alike have literally quit gaming entirely over this kind of harassment, and similar incidents have occured elsewhere in any number of fields.&lt;/p&gt;

&lt;p&gt;What we need is something that takes the burden of policing one&amp;rsquo;s own timelines and inboxes off of the user, just as spam filters do for advertising and scams.&lt;/p&gt;

&lt;p&gt;But there&amp;rsquo;s an important difference here: ignoring spam has little consequence. Ignoring violent threats can be dangerous, and even ignoring mundane harassment often sends the message that such behavior is itself without consequence.&lt;/p&gt;

&lt;p&gt;Thus unlike a spam filter which simply consigns a useless message to a dustbin, an abuse filter would need to properly file and report abusive and threatening messages, possibly even for reporting to legal authorities. It needs to be smart enough to know not just what an abusive message is, but what to &lt;em&gt;do&lt;/em&gt; about it.&lt;/p&gt;

&lt;p&gt;This also would require some cooperation from service providers, however, not all of which even provide such avenues. A Twitter client, for instance, would need to be able to report a user as abusive, yet the Twitter APIs, that I can see, do not appear to support reporting a user for abuse, only for spam.&lt;/p&gt;

&lt;p&gt;I am just one guy, a relative amateur at that. This is a large problem that will require brilliant minds, lots of man hours, and probably more resources than I have at my disposal. But that doesn&amp;rsquo;t mean I can&amp;rsquo;t get it started. I intend to take a crack at developing a simple filtering engine to file and classify abusive messages given the pair of an identifying username and the text of the message. I&amp;rsquo;ll be doing it in Racket, because I think the tools Racket offers for parsing might offer some clever avenues for solutions to such problems.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s likely to be unimpressive, and it&amp;rsquo;s likely to bring grumbles about the choice of language, the simplicity of the model, and on and on. That&amp;rsquo;s the point. Consider it my challenge. A first effort to get the ball rolling, with the tacit expectation that you indeed can do better: so prove it.&lt;/p&gt;

&lt;p&gt;Work begins soon, announcements and github repo pending. Let&amp;rsquo;s help make the internet a better place to be.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>URI bug fixed</title>
   <link>http://jarcane.github.com/blog/2014/09/16/uri-bug-fixed.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-16-uri-bug-fixed-html</guid>
   <pubDate>Tue, 16 Sep 2014 22:29:00 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;Thanks to the quick efforts of Greg Hendershott, we now have a fix for the Windows URI path generation, so links to subpages should all work correctly now. Let me know if there&amp;rsquo;s any further problems.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Disqus comments with Frog</title>
   <link>http://jarcane.github.com/blog/2014/09/16/disqus-comments-with-frog.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-16-disqus-comments-with-frog-html</guid>
   <pubDate>Tue, 16 Sep 2014 10:15:18 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;I had a slightly tricky time setting up a numbered comment link with Disqus, so I thought it might be helpful to write up a quick post on how I did it.&lt;/p&gt;

&lt;p&gt;The standard Frog templates of course include a widget for embedding a Disqus comment thread in a page, which is quite handy, however without configuration Disqus defaults to an obnoxious thing full of Yahoo ads. To fix this, you need to register an account with Disqus, and create a new site with it, which you can do &lt;a href="https://disqus.com/admin/create/"&gt;here&lt;/a&gt;. Give it a name and a unique URL, which will provide the &amp;ldquo;shortname&amp;rdquo; you&amp;rsquo;ll use with the Disqus widget and scripts.&lt;/p&gt;

&lt;p&gt;From here, you&amp;rsquo;ll go to the install page, from which you can select from a number of options from which we want to choose the one called &lt;em&gt;Universal Code&lt;/em&gt;. This page contains instructions for manually embedding the necessary JavaScript files for Disqus to work. Leave this open for now, we actually don&amp;rsquo;t need it for step 1, which has already been helpfully provided via Frog&amp;rsquo;s Disqus widget.&lt;/p&gt;

&lt;p&gt;Instead, we want to open up the &lt;code&gt;post-template.html&lt;/code&gt; in our Frog project&amp;rsquo;s _src directory, and look for the &lt;code&gt;@disqus-comments["shortname"]&lt;/code&gt; line and replace &amp;ldquo;shortname&amp;rdquo; with the shortname you chose for your Disqus account. If you&amp;rsquo;re not sure what that is, look in the template code on the &lt;em&gt;Universal Code&lt;/em&gt; guide for &lt;code&gt;var disqus_shortname =&lt;/code&gt; at the top of the code box in step 1.&lt;/p&gt;

&lt;p&gt;This is enough to get us comments pages that should now be blissfully free of annoying Yahoo Ads, and also gives us moderation tools and other handy settings for configuring how Disqus works, but there&amp;rsquo;s one other useful step you might want (I did), and that&amp;rsquo;s one of those nice little numbered &amp;ldquo;comments&amp;rdquo; links at the bottom of our posts when looking at the main blog page.&lt;/p&gt;

&lt;p&gt;To do that, we need to make some modifications to &lt;code&gt;index-template.html&lt;/code&gt; and create a footer that contains what we want. We want to add a set of  tags after &lt;code&gt;@|content|&lt;/code&gt; to contain a link that the Disqus software will then modify to contain a comments count. This looks like this:&lt;/p&gt;

&lt;div class="brush: html"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;  &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;@|uri-path|#disqus_thread&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Comments&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    ** Disqus javascript goes here**
  &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Then, after the &lt;code&gt;a href&lt;/code&gt; line we can just paste in the code from the second box in the &lt;em&gt;Universal Code&lt;/em&gt; guide, under &amp;ldquo;How to display comment count.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;And voila, numbered comments links in our Frog posts!&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Technical Difficulties</title>
   <link>http://jarcane.github.com/blog/2014/09/16/technical-difficulties.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-16-technical-difficulties-html</guid>
   <pubDate>Tue, 16 Sep 2014 00:44:56 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;Currently aware of an issue in Frog resulting in malformed page URLs for my posts. Users on browsers other than Chrome will get 404 errors accessing full blog pages. Greg Hendershott is aware of the issue now, and I&amp;rsquo;ll get the site patched as soon as he pushes a fix to Frog.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Choosing a Lisp</title>
   <link>http://jarcane.github.com/blog/2014/09/15/choosing-a-lisp.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-15-choosing-a-lisp-html</guid>
   <pubDate>Mon, 15 Sep 2014 23:22:25 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;I began my adventure back into the world of programming with Python. My last book had started to peter out in sales, and I began seriously re-evaluating my career potential, and it was at this point that a friend introduced me to &lt;a href="http://codecademy.com"&gt;Codecademy&lt;/a&gt;. I was immediately taken with the interactive approach to programming instruction, and in particular gravitated to Python, because it was a language I&amp;rsquo;d tinkered with before and whose power, especially in strings and lists, I&amp;rsquo;d always been impressed with.&lt;/p&gt;

&lt;p&gt;I devoured the Python course greedily and soon moved on to my first &amp;ldquo;big&amp;rdquo; project, &lt;a href="https://github.com/jarcane/handhRL"&gt;handhRL&lt;/a&gt; a roguelike based on one of my tabletop rulesets. However, as I grappled with the tedium of building random object generators with massive elseif-based constructor patterns, and the poor performance and gaming potential, I also was acutely aware I&amp;rsquo;d need to branch out into other languages.&lt;/p&gt;

&lt;p&gt;And then another friend recommended I try Lisp. I consider it a fateful day. I&amp;rsquo;m not honestly certain whether to curse him for it or thank him. I tried a number of entryways into the world, and indeed, choosing which Lisp to focus on has consumed much of the last two months of my time. I fall more in love with Lisp the more I learn of it, but choosing a flavor of it has tormented me more than perhaps it should.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what I have learned.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;There are a dizzying array of Lisps out there, but by and large the main options boil down to the following:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Common Lisp&lt;/li&gt;
 &lt;li&gt;Scheme&lt;/li&gt;
 &lt;li&gt;Clojure&lt;/li&gt;
 &lt;li&gt;Racket&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;There&amp;rsquo;s more of course, Paul Graham has Arc which powers Hacker News, there&amp;rsquo;s the venerable Emacs Lisp that powers the very editor I write these posts on, but those four are probably the most prominent and feasible for at least some practical amount of actual work.&lt;/p&gt;

&lt;p&gt;I started with Common Lisp. Or at least, attempting it. I suspect many people do, those that don&amp;rsquo;t instead get exposed to Scheme in college. I suspect now I understand why so many come away with a bad impression. Common Lisp is far easier to learn now than it was 10 years ago, but it&amp;rsquo;s still a dialect built on compromises and mired in ancient and cthonian syntax. I found myself stymied by having to learn 12 different ways of doing any given thing, and by chapter-long exercises done entirely in a REPL that then crashed or fell victim to an error somewhere back on page 2.&lt;/p&gt;

&lt;p&gt;So, from there I cast around and found Racket. And lo, the heavens did open, and mine eyes did see the light. While I did catch glimpses of the power of Lisp with my initial toolings, it was in the purity and clarity of Racket, in its wonderful documentation, in the easy power of the Lisp&amp;ndash;1, that I found the full breadth of what I&amp;rsquo;d seen as I stumbled through the CL wilderness. I played and tinkered and hacked. I wrote an &lt;a href="https://github.com/jarcane/MicroMini"&gt;8-bit VM&lt;/a&gt; in just 206 lines of code. 206!&lt;/p&gt;

&lt;p&gt;But I stumbled as well. I ran into problems implementing terminal i/o with my virtual machine, so it would only run in Linux. I found myself frustrated by the lack of mature development for pretty common &amp;ldquo;getting work done&amp;rdquo; tasks, at least for the kind of work I wanted to do. As well, I found myself stymied by the books and documentation; put off by the beginner material, but utterly baffled by the advanced features.&lt;/p&gt;

&lt;p&gt;I made another run at Common Lisp, getting pretty far in Peter Seibel&amp;rsquo;s excellent &lt;a href="http://www.gigamonkeys.com/book/"&gt;Practical Common Lisp&lt;/a&gt;. Ultimately though, more exposure to the many-splendored weirdness of CL ultimately lead me to think perhaps it just wasn&amp;rsquo;t the flavor for me.&lt;/p&gt;

&lt;p&gt;Another friend had mentioned Clojure. I was put off by Clojure up until now, because it reeked of startup culture and I frankly have a long-standing grudge against Java. But Java is practically the reigning Lord and Master of the mobile-heavy Finnish scene, and it seemed to be driving a lot of new adoption locally and even a few actual jobs.&lt;/p&gt;

&lt;p&gt;So, I discussed it with my wife and we mutually agreed I should give it a shot. I meditated upon the &lt;a href="http://clojurescriptkoans.com/"&gt;ClojureScript Koans&lt;/a&gt;, and was initially quite intrigued by its #() and its funcional purity, if a bit baffled by the sheer number of different data types, and put off by the ugly syntax. I code-golfed a FizzBuzz in a tweet done in CS. I then thought I should meditate upon the full &lt;a href="https://github.com/functional-koans/clojure-koans"&gt;Clojure Koans&lt;/a&gt; in order to learn those things which CS had by necessity neglected.&lt;/p&gt;

&lt;p&gt;By the end, the only &amp;ldquo;enlightenment&amp;rdquo; I found there was the cold burning focus of pure fury. I hated its clunky implementation, it&amp;rsquo;s utter violation of the purity I so loved in a Lisp. I hated how utterly inconsistent everything was. I hated how any error could spell utter doom to your entire system, as typo&amp;rsquo;d recursions led to full CPUs and runaway threads. I hate hate hated the threading macro with the fire of a thousand incandescent supernovas.&lt;/p&gt;

&lt;p&gt;However, it also gave me a sense of perspective, and so I meditated on the &lt;a href="https://github.com/google/lisp-koans"&gt;Common Lisp Koans&lt;/a&gt;. There I faced a an anticlimax. The final meditation was on SBCL threads, and SBCL threads were like grasping a stream of water. I had recieved all the enlightenment that Common Lisp seemed ready to offer.&lt;/p&gt;

&lt;p&gt;And in the end, all I wanted was my Racket back. The prodigal son wanted to come home.&lt;/p&gt;

&lt;p&gt;I am sure that in the cold light of reason I could find work in Clojure or Common Lisp. I do indeed envy their library support, and have come to respect a number of those features that they offer, and may even seek to reimplement some of them in my own Racket set up.&lt;/p&gt;

&lt;p&gt;It is true as well that Racket is not well represented in the world of working programmers. But it is well represented in the world of computer science, a world I increasingly suspect I might like to enter if I should prove worthy. While there is something of a gap between the &amp;ldquo;beginner&amp;rdquo; and &amp;ldquo;advanced&amp;rdquo; levels of the Racket world, the flipside to this is that it is stuffed with incredibly brilliant people who are almost to a one the most polite and helpful people I&amp;rsquo;ve met since returning to programming.&lt;/p&gt;

&lt;p&gt;So, with at least a year of language courses before I can even think about a job or university, why not hang around and contribute and learn in a place where I feel most at home? It was Python being this for me that made me a programmer again, and I think it could be Racket doing so that makes me a &lt;em&gt;good&lt;/em&gt; one.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Christening the Grimoire</title>
   <link>http://jarcane.github.com/blog/2014/09/15/christening-the-grimoire.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-15-christening-the-grimoire-html</guid>
   <pubDate>Mon, 15 Sep 2014 23:07:10 FLE Standard Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;Welcome to Arcane Syntax, destined to be the new home of all things relating to the arcane art of computer programming and development, as flowing from the mind of myself, an self-trained apprentice programmer, Finnish language student, and former tabletop games writer.&lt;/p&gt;

&lt;p&gt;The chief subject matter of Arcane Syntax is likely at this point to be focusing especially on the Racket programming language, which has ultimately proved my favorite home in the magical land of Lisp dialects, for reasons which I shall expound upon in my next post.&lt;/p&gt;

&lt;p&gt;I have been at this programming thing for but a short time, having previously not touched more than a few simple dice rollers in at least a decade. If something I should happen to post on this blog demonstrate a profound ignorance, it is likely for lack of education, and thus polite instruction is likely to be welcomed eagerly.&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>