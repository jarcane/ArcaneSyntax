<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">Arcane Syntax: Posts tagged 'programming'</title>
 <link rel="self" href="http://jarcane.github.com/feeds/programming.atom.xml" />
 <link href="http://jarcane.github.com/tags/programming.html" />
 <id>urn:http-jarcane-github-com:-tags-programming-html</id>
 <updated>2014-12-29T18:04:20Z</updated>
 <entry>
  <title type="text">A resume and a code example in one</title>
  <link rel="alternate" href="http://jarcane.github.com/blog/2014/12/29/a-resume-and-a-code-example-in-one.html" />
  <id>urn:http-jarcane-github-com:-blog-2014-12-29-a-resume-and-a-code-example-in-one-html</id>
  <published>2014-12-29T18:04:20Z</published>
  <updated>2014-12-29T18:04:20Z</updated>
  <author>
   <name>John Berry</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;Recently I asked on Twitter about whether it was possible to find work in functional programming without a degree, seeing as I&amp;rsquo;m a functional programmer and I don&amp;rsquo;t have a degree, and was pleasantly surprised to be contacted by a recruiter who provided some very useful advice on which languages to look into.&lt;/p&gt;

&lt;p&gt;They also asked for a resume, which suddenly brought me to the realization that I hadn&amp;rsquo;t actually yet written a programming-oriented resume yet.&lt;/p&gt;

&lt;p&gt;So I started thinking of how I could write a resume that would actually highlight my skills thus far as a programmer in an immediately obvious way, and I think I found an interesting solution.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;It&amp;rsquo;s pretty common for UI or graphics designers to hand design their own resumes; it&amp;rsquo;s a very clear and direct way of showing off your own design skills in an obvious way. Sadly, other than that there&amp;rsquo;s little in the way of options for the rest of us: there&amp;rsquo;s loads of templates out there for making an interesting &lt;em&gt;looking&lt;/em&gt; resume, but that&amp;rsquo;s not really the same effect for programmers as it is for a designer.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s needed is a way to show off what one is capable of as a programmer through the medium of the resume itself.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure I&amp;rsquo;ve quite got that far yet, but I have done what I think is a close-by solution: showing off one&amp;rsquo;s basic capabilities as a programmer through the medium of how the resume is &lt;em&gt;generated&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Thus, &lt;a href="https://github.com/jarcane/resume.hsy"&gt;resume.hsy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;resume.hsy&lt;/code&gt; is a straightforward Heresy program with one goal: to generate my resume in Markdown format. After just a half-day&amp;rsquo;s effort, it succeeds at it.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not particularly impressive code (and the contortions involved in generating the output strings are a little ugly), and the output result is by design, not especially beautiful. The point here isn&amp;rsquo;t to make a beautiful design object, but to present my skills in a clear format through the lens of a clear example of how I code. The fact that I designed the language it&amp;rsquo;s written in is also part of the point of the demonstration, inspired by &lt;a href="https://twitter.com/boothead/status/545886788196507648"&gt;the reaction of one commenter&lt;/a&gt; to my original post on Twitter.&lt;/p&gt;

&lt;p&gt;Admittedly, that last bit is probably also a weakness: nobody codes in Heresy yet except me. But the Markdown output is readily available, and the code is mostly readable to anyone familiar with Lisp, and I&amp;rsquo;m also very proud of having written the first example of useful code in Heresy.&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">On LET: a brief comparative thesis</title>
  <link rel="alternate" href="http://jarcane.github.com/blog/2014/11/11/on-let-a-brief-comparative-thesis.html" />
  <id>urn:http-jarcane-github-com:-blog-2014-11-11-on-let-a-brief-comparative-thesis-html</id>
  <published>2014-11-11T08:56:05Z</published>
  <updated>2014-11-11T08:56:05Z</updated>
  <author>
   <name>John Berry</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;I started programming, as many people my age did, as a kid, with a computer running Microsoft BASIC. Disk Extended Color Basic on a Tandy Color Computer 3, to be precise. I wrote quite a few programs, large and small, as well as modding a few others that came on various Rainbow disks I&amp;rsquo;d cobbled together mostly from either the Internet or an uncle who was far more invested in the scene.&lt;/p&gt;

&lt;p&gt;Thus, when I at last discovered the introduction to macros and language definitions in &lt;em&gt;Realm of Racket&lt;/em&gt;, it struck me that it might be interesting to practice those tools by experimenting with defining a BASIC-Lisp hybrid which I am tentatively tempted to entitle &amp;ldquo;Heresy&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still in the research stages right now, though I&amp;rsquo;m putting code to file today, and in researching how to map keywords from one to the other I discovered a very important clash: LET.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Besides the obvious math operators and so forth, LET is one of the few standard keywords that exists in both BASIC and Lisp languages, but both could not possibly seem to describe more polar opposite functions.&lt;/p&gt;

&lt;p&gt;LET in BASIC is the somewhat deprecated global variable declarator and assigner. Ie.:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;LET X = 5&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;LET in old-school BASIC is probably closer in function to the old Lisp keyword SETQ, in that it is used both to explicitly declare a new variable, but also to set that variable to a new value. It&amp;rsquo;s also distinct from DIM in that DIM was primarily used to declare arrays until much later dialects like QBasic and Visual Basic, and also because it must explicitly assign a value.&lt;/p&gt;

&lt;p&gt;LET in Lisp and Scheme however exist to provide temporary names for local values, usually within a function or a macro. They almost provide for variables what lambdas do for functions, and even allow the definition of new functions as well (either through explicit syntax for this, or by taking advantage of lambdas).&lt;/p&gt;

&lt;p&gt;And yet &amp;hellip; look back at that syntax for the BASIC version again. Both of these terms are coming from the same place: algebra. I am willing to bet that nearly everyone reading this write now has done at least one problem, probably thousands, that started with some statement of &amp;lsquo;let x equal &amp;hellip;.&amp;rsquo; Wiktionary even cites this in the definition of the word as an example: &amp;ldquo;Let P be the point where AB and OX intersect.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;There is of course a reason for this. Lisp is famously based on Church&amp;rsquo;s lambda calculus, and its mathematical pedegree is hardly a secret. Dartmouth BASIC meanwhile was originally made mainly to help students do calculations for their homework assignments, the terminology springing directly from the pages of their algebra and trigonometry assignments.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s in this historical meeting point that we can ask ourselves a question, and answer it.&lt;/p&gt;

&lt;p&gt;Question: how did these two uses of LET evolve into such polar opposites? Answer: They didn&amp;rsquo;t. They both mean the same thing; it&amp;rsquo;s their approach to problem solving that&amp;rsquo;s different.&lt;/p&gt;

&lt;p&gt;Wait, what?&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s true. If you go back and look at the exercises and code samples and tools offered in the original Dartmouth BASIC, you realize something about what BASIC programs are meant to be, vs. how Lisp programs are generally approached. Dartmouth BASIC was written for tiny problems, word problems. The domain of a BASIC program was expected to be a single problem, and so the syntax and semantics both were constructed with that goal in mind.&lt;/p&gt;

&lt;p&gt;Lisp on the other hand, while it has diverged over the years into many approaches from the purely functional Clojure to the &amp;lsquo;basically just rewritten C&amp;rsquo; of some Emacs-Lisp code, still fundamentally it comes instead from a logic that was about breaking down one big program into many littler problems, each of which may potentially need to define it&amp;rsquo;s own local variables.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not that LET necessarily means something different etymologically here, both creators were ultimately seeking to define the same tool, but the difference in how they actually work on a practical level and how they came to act as keywords in two very different ways, has more to do with how they approach problems as discrete pieces.&lt;/p&gt;

&lt;p&gt;In the past I&amp;rsquo;ve often defended BASIC, in part on the strength of the revisions made in more purely proceduraly dialects like QBasic, and in part because we BASIC &amp;lsquo;hobbyists&amp;rsquo;, shunned away as we were by the C coders and the elite ASM hackers of the day and since, really often could write code just as procedural and well thought out as any. It&amp;rsquo;s just that the dirty secret, what those sneering outsiders could see that we couldn&amp;rsquo;t, was just how much we were working &lt;em&gt;against&lt;/em&gt; the language to do it. BASIC was asked, and somehow managed, to do things and solve problems far in advance of the scope for which it was ever designed.&lt;/p&gt;

&lt;p&gt;There is actually tail-call-optimization and code for writing recursive macros in &lt;em&gt;FreeBASIC&lt;/em&gt; now (there are, amusingly enough, even a couple simple Lisp interpreters, even an embedded scripting language in Lisp for FB). Of course, this is in FB, a modern dialect of the QBasic branch with at least something more resembling a modern approach, but it still illustrates the fierce devotion that BASIC fans were almost &lt;em&gt;driven to&lt;/em&gt; by their reputation in the wider community.&lt;/p&gt;

&lt;p&gt;These days of course, I look at even QBasic code and shudder to think, but then I also feel the same way looking at Java. And while Heresy kinda started as a joke esolang idea and may stay that way, it interests me to wonder if a &amp;ldquo;Lisp-flavored BASIC&amp;rdquo; might be a genuinely useful dialect for introducing those die-hard BASIC coders to the flexibility of a language that is not still fighting attempts to use it for more than solving simple algebraic equations.&lt;/p&gt;

&lt;p&gt;Of course, I still haven&amp;rsquo;t decided which definition of LET to stick to.&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Learning Programming: the Backlog</title>
  <link rel="alternate" href="http://jarcane.github.com/blog/2014/09/29/learning-programming-the-backlog.html" />
  <id>urn:http-jarcane-github-com:-blog-2014-09-29-learning-programming-the-backlog-html</id>
  <published>2014-09-29T23:08:19Z</published>
  <updated>2014-09-29T23:08:19Z</updated>
  <author>
   <name>John Berry</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;Thus far, I have been back to programming for a vanishingly small amount of time, roughly three months by Github commit reckoning (plus a bit of time spent in Codecademy). In that time it has seemed, to myself and even to others to a lesser extent, rather remarkable the amount of progress I&amp;rsquo;ve made. In just that three months and change I&amp;rsquo;ve written a roguelike game, an old-fashioned line editor, a text graphics wrapper, an esolang, a virtual machine, a basic weblog, and even taken over as chief maintainer of an open source project for the first time.&lt;/p&gt;

&lt;p&gt;Thus by all appearances, it seems like I&amp;rsquo;ve already learned a lot, and in some ways that&amp;rsquo;s true.&lt;/p&gt;

&lt;p&gt;In other ways, it&amp;rsquo;s not.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;What I have learned thus far, more than anything, is that in actuality for someone with a particular frame of mind and some grasp of logical thinking and problem solving, it is relatively easy to make a seemingly large amount of apparenty progress as a programmer in a very short span of time.&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;I&amp;rsquo;ve realized that it is very easy to get fairly far in programming with just a little bit of knowlege and some basic logic skills, but then when you start wanting to push just a bit farther than that, the whole sense of progress collapses like a house of cards &amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;And the thing is, this can be a very dangerous trap, for learning anything. A crucial time, one I&amp;rsquo;m frankly wrestling with. When learning (or re-learning) a new skill, there&amp;rsquo;s a point at which the &amp;ldquo;good start&amp;rdquo; you&amp;rsquo;ve made is actually a hindrance. You &lt;em&gt;can&lt;/em&gt; become a programmer in 28 days.&lt;/p&gt;

&lt;p&gt;You might even be decent at it, given some more practice, if you&amp;rsquo;ve the head for it and all you want to do is be a &lt;a href="http://www.paulgraham.com/avg.html"&gt;&amp;ldquo;Blub&amp;rdquo;&lt;/a&gt; coder for life. In the old days this was how a lot of working programmers got started, and cubicle farms the world over are similarly filled with these. The local Java apprenticeship program I think lasts all of three months. Many so-called &amp;ldquo;hacker schools&amp;rdquo; and &amp;ldquo;bootcamps&amp;rdquo; more or less crash-course young minds through an easy language like Ruby or Python in a matter of weeks and send them off into the world $10,000 poorer and with all the coding knowledge of the average Codecademy user.&lt;/p&gt;

&lt;p&gt;To be a &lt;em&gt;good&lt;/em&gt; one, though, even a &lt;em&gt;great&lt;/em&gt; one, you need to be willing to set aside that &amp;ldquo;good start&amp;rdquo; and keep building back on the fundamentals again and again. And when you already have that start, when you already feel like you &lt;em&gt;are&lt;/em&gt; &amp;ldquo;good enough,&amp;rdquo; it&amp;rsquo;s incredibly hard to force yourself to go back to feeling like you&amp;rsquo;ve no idea what you&amp;rsquo;re doing all over again.&lt;/p&gt;

&lt;p&gt;I programmed when I was younger, quite a lot in fact, and that skill never quite decays, so that plus some great re-introductory material seemed to be catapulting me into the stratosphere at a rate not dissimilar from my foray into book publishing. There was a window when I think I was even getting a bit cocky about it. Racket was good for breaking this. The basics of Racket are as easy to grasp as any other, probably the easiest Lisp to learn, with some pretty good intro books and guides. But those advanced topics, the language tools, the contracts, the dialects, all hang there in the Guide sidebar reminding you of just how much more there is to learn. And hanging out with the PLT crew, and the #esolang hackers, and other similarly smart folk (seriously the smartest people I&amp;rsquo;ve ever met in programming were either esolang nerds or Lispers or one flavor or another), is also hugely eye-opening for a cocky young sprat.&lt;/p&gt;

&lt;p&gt;This is all one reason why I&amp;rsquo;ve picked up quite a bit of backlog of books to study, probably enough to fill a year&amp;rsquo;s university curriculum at a minimum. Now that the rambling phase of the post is over, I thought it might be useful to someone or simply for posterity to catalog my current &amp;ldquo;learn stack&amp;rdquo;. These are the books I want to tackle in the near-ish future, though in what order and which next is still the subject of some debate.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.ccs.neu.edu/home/matthias/HtDP2e/"&gt;How To Design Programs&lt;/a&gt; - I&amp;rsquo;ve started this book twice. Both times I&amp;rsquo;ve got impatient or distracted and gone on to something that seemed to be leading me towards more direct progress; it has a very particular style of design it teaches that I found a bit odd, and the focus on &amp;ldquo;learning languages&amp;rdquo; was a bit frustrating when all I really wanted to do was learn more about Racket proper.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-1.html"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt; - Anyone who is reading this probably already is at least familiar with this name. It seems to be perhaps one of the most well-regarded books on programming and CS there is; almost no one I&amp;rsquo;ve ever spoken to about it had anything but glowing praise, even the ones who didn&amp;rsquo;t even write Scheme or Lisp anymore. I&amp;rsquo;m definitely curious, especially as it covers a lot of systems programming stuff that seems to be where my mind wants to go as a programmer. (For similar reasons, I&amp;rsquo;m also really interested in &lt;a href="http://cs.brown.edu/courses/cs173/2012/book/"&gt;PLAI&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.buildyourownlisp.com/"&gt;Build Your Own Lisp&lt;/a&gt; - An unusual approach for a new language introduction, this book aims to teach the reader C by walking them through the development of a dialect of Lisp. I&amp;rsquo;m a bit suspicious of some of the design decisions (it controversially avoids dealing with quote and macros by replacing them with something called &amp;ldquo;Q-expressions&amp;rdquo;), but C is a good language to know and this seems like a fun way to learn it. In a similar vein, there is &lt;a href="https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours"&gt;Write Yourself A Scheme in 48 Hours&lt;/a&gt;, which aims to give a crash course in Haskell by teaching you how to build a basic Scheme interpreter with it. This leads to my next pick:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://learnyouahaskell.com/"&gt;Learn You a Haskel for Great Good&lt;/a&gt; - I am deeply curious about Haskell, because I am deeply curious about functional programming and also by the unusual arcaneness of it. This book seems to be a fan favorite, as it were, and the tone is certainly inviting. There&amp;rsquo;s also an &lt;a href="http://learnyousomeerlang.com/"&gt;Erlang book&lt;/a&gt; inspired by it, which I&amp;rsquo;m more interested for professional reasons: it was invented next-door, as it were, so there&amp;rsquo;s a fair number of jobs about in Erlang still.&lt;/p&gt;

&lt;p&gt;I think the next book I tackle will be one of these, I just haven&amp;rsquo;t decided which yet. I&amp;rsquo;m very open to advice, so feel free to leave your thoughts in the comments, as opinionated as you like.&lt;/p&gt;&lt;/html&gt;</content></entry></feed>