<?xml version="1.0" encoding="utf-8"?> 
<rss version="2.0">
 <channel>
  <title>Arcane Syntax: Posts tagged 'Racket'</title>
  <description>Arcane Syntax: Posts tagged 'Racket'</description>
  <link>http://jarcane.github.com/tags/Racket.html</link>
  <lastBuildDate>Wed, 17 Sep 2014 10:43:53 FLE Daylight Time</lastBuildDate>
  <pubDate>Wed, 17 Sep 2014 10:43:53 FLE Daylight Time</pubDate>
  <ttl>1800</ttl>
  <item>
   <title>We need a new filter</title>
   <link>http://jarcane.github.com/blog/2014/09/17/we-need-a-new-filter.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-17-we-need-a-new-filter-html</guid>
   <pubDate>Wed, 17 Sep 2014 10:43:53 FLE Daylight Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;In the wake of recent events in the gaming sphere, I&amp;rsquo;ve been thinking a good hard think. Harassment on the internet is becoming a major societal problem. People&amp;rsquo;s lives are being threatened. Women are bombarded with abuse on an unconscionable scale. Something needs to be done: we can talk until we&amp;rsquo;re blue in the face about why sending someone violent threats and harassment is wrong, but the harassers aren&amp;rsquo;t listening.&lt;/p&gt;

&lt;p&gt;What we need, is an abuse filter.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;Since the public birth of the internet, millions, possibly even billions of dollars have been spent in pursuit of building a better spam filter. Countless man-hours have been dedicated to finding new ways of identifying and properly filing away to /dev/null the endless torrent of garbage emails about Viagra and Nigerian princes.&lt;/p&gt;

&lt;p&gt;And yet, where are the millions spent on solutions for internet harassment? The countless man-or-woman-hours poured into making life on the internet less an endless free-fire zone for abusive sociopaths?&lt;/p&gt;

&lt;p&gt;Most existing social media systems rely entirely on user reporting, essentially leaving it to the user to manually report and block each and every abusive message. This is about as ludicrous a task to demand as it would be for spam. Especially for those targeted by concerted campaigns like #gamergate/#quinnspiracy, this is more or less an intractable problem. Props aplenty for the courage of women like Zoe Quinn and Anita Sarkeesian who&amp;rsquo;ve stuck it out and even done that work, but they never should&amp;rsquo;ve had to do it in the first place, and many choose simply to leave rather than deal with it. Some very talented women and men alike have literally quit gaming entirely over this kind of harassment, and similar incidents have occured elsewhere in any number of fields.&lt;/p&gt;

&lt;p&gt;What we need is something that takes the burden of policing one&amp;rsquo;s own timelines and inboxes off of the user, just as spam filters do for advertising and scams.&lt;/p&gt;

&lt;p&gt;But there&amp;rsquo;s an important difference here: ignoring spam has little consequence. Ignoring violent threats can be dangerous, and even ignoring mundane harassment often sends the message that such behavior is itself without consequence.&lt;/p&gt;

&lt;p&gt;Thus unlike a spam filter which simply consigns a useless message to a dustbin, an abuse filter would need to properly file and report abusive and threatening messages, possibly even for reporting to legal authorities. It needs to be smart enough to know not just what an abusive message is, but what to &lt;em&gt;do&lt;/em&gt; about it.&lt;/p&gt;

&lt;p&gt;This also would require some cooperation from service providers, however, not all of which even provide such avenues. A Twitter client, for instance, would need to be able to report a user as abusive, yet the Twitter APIs, that I can see, do not appear to support reporting a user for abuse, only for spam.&lt;/p&gt;

&lt;p&gt;I am just one guy, a relative amateur at that. This is a large problem that will require brilliant minds, lots of man hours, and probably more resources than I have at my disposal. But that doesn&amp;rsquo;t mean I can&amp;rsquo;t get it started. I intend to take a crack at developing a simple filtering engine to file and classify abusive messages given the pair of an identifying username and the text of the message. I&amp;rsquo;ll be doing it in Racket, because I think the tools Racket offers for parsing might offer some clever avenues for solutions to such problems.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s likely to be unimpressive, and it&amp;rsquo;s likely to bring grumbles about the choice of language, the simplicity of the model, and on and on. That&amp;rsquo;s the point. Consider it my challenge. A first effort to get the ball rolling, with the tacit expectation that you indeed can do better: so prove it.&lt;/p&gt;

&lt;p&gt;Work begins soon, announcements and github repo pending. Let&amp;rsquo;s help make the internet a better place to be.&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Disqus comments with Frog</title>
   <link>http://jarcane.github.com/blog/2014/09/16/disqus-comments-with-frog.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-16-disqus-comments-with-frog-html</guid>
   <pubDate>Tue, 16 Sep 2014 10:15:18 FLE Daylight Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;I had a slightly tricky time setting up a numbered comment link with Disqus, so I thought it might be helpful to write up a quick post on how I did it.&lt;/p&gt;

&lt;p&gt;The standard Frog templates of course include a widget for embedding a Disqus comment thread in a page, which is quite handy, however without configuration Disqus defaults to an obnoxious thing full of Yahoo ads. To fix this, you need to register an account with Disqus, and create a new site with it, which you can do &lt;a href="https://disqus.com/admin/create/"&gt;here&lt;/a&gt;. Give it a name and a unique URL, which will provide the &amp;ldquo;shortname&amp;rdquo; you&amp;rsquo;ll use with the Disqus widget and scripts.&lt;/p&gt;

&lt;p&gt;From here, you&amp;rsquo;ll go to the install page, from which you can select from a number of options from which we want to choose the one called &lt;em&gt;Universal Code&lt;/em&gt;. This page contains instructions for manually embedding the necessary JavaScript files for Disqus to work. Leave this open for now, we actually don&amp;rsquo;t need it for step 1, which has already been helpfully provided via Frog&amp;rsquo;s Disqus widget.&lt;/p&gt;

&lt;p&gt;Instead, we want to open up the &lt;code&gt;post-template.html&lt;/code&gt; in our Frog project&amp;rsquo;s _src directory, and look for the &lt;code&gt;@disqus-comments["shortname"]&lt;/code&gt; line and replace &amp;ldquo;shortname&amp;rdquo; with the shortname you chose for your Disqus account. If you&amp;rsquo;re not sure what that is, look in the template code on the &lt;em&gt;Universal Code&lt;/em&gt; guide for &lt;code&gt;var disqus_shortname =&lt;/code&gt; at the top of the code box in step 1.&lt;/p&gt;

&lt;p&gt;This is enough to get us comments pages that should now be blissfully free of annoying Yahoo Ads, and also gives us moderation tools and other handy settings for configuring how Disqus works, but there&amp;rsquo;s one other useful step you might want (I did), and that&amp;rsquo;s one of those nice little numbered &amp;ldquo;comments&amp;rdquo; links at the bottom of our posts when looking at the main blog page.&lt;/p&gt;

&lt;p&gt;To do that, we need to make some modifications to &lt;code&gt;index-template.html&lt;/code&gt; and create a footer that contains what we want. We want to add a set of  tags after &lt;code&gt;@|content|&lt;/code&gt; to contain a link that the Disqus software will then modify to contain a comments count. This looks like this:&lt;/p&gt;

&lt;div class="brush: html"&gt;
 &lt;table class="sourcetable"&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td class="linenos"&gt;
     &lt;div class="linenodiv"&gt;
      &lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;
    &lt;td class="code"&gt;
     &lt;div class="source"&gt;
      &lt;pre&gt;  &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;@|uri-path|#disqus_thread&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Comments&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    ** Disqus javascript goes here**
  &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Then, after the &lt;code&gt;a href&lt;/code&gt; line we can just paste in the code from the second box in the &lt;em&gt;Universal Code&lt;/em&gt; guide, under &amp;ldquo;How to display comment count.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;And voila, numbered comments links in our Frog posts!&lt;/p&gt;&lt;/html&gt;</description></item>
  <item>
   <title>Choosing a Lisp</title>
   <link>http://jarcane.github.com/blog/2014/09/15/choosing-a-lisp.html</link>
   <guid>urn:http-jarcane-github-com:-blog-2014-09-15-choosing-a-lisp-html</guid>
   <pubDate>Mon, 15 Sep 2014 23:22:25 FLE Daylight Time</pubDate>
   <description>&lt;html&gt;
&lt;p&gt;I began my adventure back into the world of programming with Python. My last book had started to peter out in sales, and I began seriously re-evaluating my career potential, and it was at this point that a friend introduced me to &lt;a href="http://codecademy.com"&gt;Codecademy&lt;/a&gt;. I was immediately taken with the interactive approach to programming instruction, and in particular gravitated to Python, because it was a language I&amp;rsquo;d tinkered with before and whose power, especially in strings and lists, I&amp;rsquo;d always been impressed with.&lt;/p&gt;

&lt;p&gt;I devoured the Python course greedily and soon moved on to my first &amp;ldquo;big&amp;rdquo; project, &lt;a href="https://github.com/jarcane/handhRL"&gt;handhRL&lt;/a&gt; a roguelike based on one of my tabletop rulesets. However, as I grappled with the tedium of building random object generators with massive elseif-based constructor patterns, and the poor performance and gaming potential, I also was acutely aware I&amp;rsquo;d need to branch out into other languages.&lt;/p&gt;

&lt;p&gt;And then another friend recommended I try Lisp. I consider it a fateful day. I&amp;rsquo;m not honestly certain whether to curse him for it or thank him. I tried a number of entryways into the world, and indeed, choosing which Lisp to focus on has consumed much of the last two months of my time. I fall more in love with Lisp the more I learn of it, but choosing a flavor of it has tormented me more than perhaps it should.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s what I have learned.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;There are a dizzying array of Lisps out there, but by and large the main options boil down to the following:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Common Lisp&lt;/li&gt;
 &lt;li&gt;Scheme&lt;/li&gt;
 &lt;li&gt;Clojure&lt;/li&gt;
 &lt;li&gt;Racket&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;There&amp;rsquo;s more of course, Paul Graham has Arc which powers Hacker News, there&amp;rsquo;s the venerable Emacs Lisp that powers the very editor I write these posts on, but those four are probably the most prominent and feasible for at least some practical amount of actual work.&lt;/p&gt;

&lt;p&gt;I started with Common Lisp. Or at least, attempting it. I suspect many people do, those that don&amp;rsquo;t instead get exposed to Scheme in college. I suspect now I understand why so many come away with a bad impression. Common Lisp is far easier to learn now than it was 10 years ago, but it&amp;rsquo;s still a dialect built on compromises and mired in ancient and cthonian syntax. I found myself stymied by having to learn 12 different ways of doing any given thing, and by chapter-long exercises done entirely in a REPL that then crashed or fell victim to an error somewhere back on page 2.&lt;/p&gt;

&lt;p&gt;So, from there I cast around and found Racket. And lo, the heavens did open, and mine eyes did see the light. While I did catch glimpses of the power of Lisp with my initial toolings, it was in the purity and clarity of Racket, in its wonderful documentation, in the easy power of the Lisp&amp;ndash;1, that I found the full breadth of what I&amp;rsquo;d seen as I stumbled through the CL wilderness. I played and tinkered and hacked. I wrote an &lt;a href="https://github.com/jarcane/MicroMini"&gt;8-bit VM&lt;/a&gt; in just 206 lines of code. 206!&lt;/p&gt;

&lt;p&gt;But I stumbled as well. I ran into problems implementing terminal i/o with my virtual machine, so it would only run in Linux. I found myself frustrated by the lack of mature development for pretty common &amp;ldquo;getting work done&amp;rdquo; tasks, at least for the kind of work I wanted to do. As well, I found myself stymied by the books and documentation; put off by the beginner material, but utterly baffled by the advanced features.&lt;/p&gt;

&lt;p&gt;I made another run at Common Lisp, getting pretty far in Peter Seibel&amp;rsquo;s excellent &lt;a href="http://www.gigamonkeys.com/book/"&gt;Practical Common Lisp&lt;/a&gt;. Ultimately though, more exposure to the many-splendored weirdness of CL ultimately lead me to think perhaps it just wasn&amp;rsquo;t the flavor for me.&lt;/p&gt;

&lt;p&gt;Another friend had mentioned Clojure. I was put off by Clojure up until now, because it reeked of startup culture and I frankly have a long-standing grudge against Java. But Java is practically the reigning Lord and Master of the mobile-heavy Finnish scene, and it seemed to be driving a lot of new adoption locally and even a few actual jobs.&lt;/p&gt;

&lt;p&gt;So, I discussed it with my wife and we mutually agreed I should give it a shot. I meditated upon the &lt;a href="http://clojurescriptkoans.com/"&gt;ClojureScript Koans&lt;/a&gt;, and was initially quite intrigued by its #() and its funcional purity, if a bit baffled by the sheer number of different data types, and put off by the ugly syntax. I code-golfed a FizzBuzz in a tweet done in CS. I then thought I should meditate upon the full &lt;a href="https://github.com/functional-koans/clojure-koans"&gt;Clojure Koans&lt;/a&gt; in order to learn those things which CS had by necessity neglected.&lt;/p&gt;

&lt;p&gt;By the end, the only &amp;ldquo;enlightenment&amp;rdquo; I found there was the cold burning focus of pure fury. I hated its clunky implementation, it&amp;rsquo;s utter violation of the purity I so loved in a Lisp. I hated how utterly inconsistent everything was. I hated how any error could spell utter doom to your entire system, as typo&amp;rsquo;d recursions led to full CPUs and runaway threads. I hate hate hated the threading macro with the fire of a thousand incandescent supernovas.&lt;/p&gt;

&lt;p&gt;However, it also gave me a sense of perspective, and so I meditated on the &lt;a href="https://github.com/google/lisp-koans"&gt;Common Lisp Koans&lt;/a&gt;. There I faced a an anticlimax. The final meditation was on SBCL threads, and SBCL threads were like grasping a stream of water. I had recieved all the enlightenment that Common Lisp seemed ready to offer.&lt;/p&gt;

&lt;p&gt;And in the end, all I wanted was my Racket back. The prodigal son wanted to come home.&lt;/p&gt;

&lt;p&gt;I am sure that in the cold light of reason I could find work in Clojure or Common Lisp. I do indeed envy their library support, and have come to respect a number of those features that they offer, and may even seek to reimplement some of them in my own Racket set up.&lt;/p&gt;

&lt;p&gt;It is true as well that Racket is not well represented in the world of working programmers. But it is well represented in the world of computer science, a world I increasingly suspect I might like to enter if I should prove worthy. While there is something of a gap between the &amp;ldquo;beginner&amp;rdquo; and &amp;ldquo;advanced&amp;rdquo; levels of the Racket world, the flipside to this is that it is stuffed with incredibly brilliant people who are almost to a one the most polite and helpful people I&amp;rsquo;ve met since returning to programming.&lt;/p&gt;

&lt;p&gt;So, with at least a year of language courses before I can even think about a job or university, why not hang around and contribute and learn in a place where I feel most at home? It was Python being this for me that made me a programmer again, and I think it could be Racket doing so that makes me a &lt;em&gt;good&lt;/em&gt; one.&lt;/p&gt;&lt;/html&gt;</description></item></channel></rss>